[
  {
    "id": 1,
    "title": "Fibonacci & Binary",
    "date_enable": "2022-07-01 00:00:00",
    "date_end": "2022-07-11 00:00:00",
    "update_state": 1,
    "descript": "You will be given a string as Input.<br>\nFirst, you need to do the sum of the number of 1 in the binary expression of each char in the string.<br>\nSecondly, you should output the First 16 terms of the Fibonacci sequence with first term a = 0 and b = <code>the_previous_sum</code> on different lines\n<br><b><u>Example:</u></b><br>\nThe input is \"ac\"<br>\nSo the binary expression of the first char is : 11000001 => Number of \"1\" in this is 3<br>\nAnd the binary expression of the second char is : 1100011 => Number of \"1\" in this is 4<br>\nSo the sum will be 3+4=7 => b=7<br>\nThe first terms of this Fibonacci Sequence will be:<br>\n0<br>7<br>7<br>14<br>21<br>35<br>...<br><br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More infos</div>\n<div id=\"more_info\" style=\"display: none; margin-bottom: -30px; margin-top: 35px\" value=\"0\">\n4 < string_size < 16<br>\n0 < maximum_value_of_ints < 2 ** 15\n</div>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 38,
    "voters": 5,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 2,
    "title": "Ulam of Ulam",
    "date_enable": "2022-07-11 00:00:00",
    "date_end": "2022-07-18 00:00:00",
    "update_state": 1,
    "descript": "You will be given two numbers as Input. (separated by a space)<br>\nThis problem is about recursion and Ulam numbers<br>\n\nIn this problem we define the first two Ulam numbers to be 1 and 2.<br>\nA number is Ulam if there is only one way to get this number by adding two different Ulam numbers.<br>\n<b><u>Example:</b></u><br>\n<div style='text-align: left; padding-left: 30px'>\n- 3 is Ulam because the only way to get 3 with two different Ulam number is 1 + 2<br>\n- 4 is Ulam because the only way to get 4 with two different Ulam number is 1 + 3. 2 + 2 doesn't work because 2 == 2 and numbers need to be different<br>\n- 5 is <b>NOT</b> Ulam because there are two ways to get 5. 1 + 4 and 2 + 3<br>\n- 6 is Ulam because there is only way to get 6 while adding 2 different Ulam numbers: 2 + 4. 3 + 3 doesn't work because 3 == 3. 1 + 5 doesn't work because 5 isn't Ulam</div><br><br>\n\nWe denote <code>u(n)</code> the n-th Ulam number.\n\nBack to the problem: given two integers <code>n</code> and <code>r</code> separated by a space, the goal is to compute <code>u</code> applied <code>r</code> times to the number <code>n</code>.<br>\n<b><u>Example:</b></u><br>\nIf the input is  '6 3' the output should be  <code>u(u(u(6)))</code><br>\nFirst time u(6) = 8 (the 6th Ulam number)<br>\nSecond time u(8) = 13 (the 8th Ulam number)<br>\nThird time u(13) = 36 (the 13th Ulam number)<br>\nSo the output should be 36.<br><br>\n\n<div style='font-weight: 900; cursor: pointer; margin-bottom: -35px;' onclick='moreInfo()'>More infos</div>\n<div id='more_info' style='display: none; margin-bottom: -30px; margin-top: 35px' value='0'>\n0 < n < 28<br>\n0 < r < 17<br>\n</div>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 21,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 3,
    "title": "Nearest Alpha",
    "date_enable": "2022-07-18 00:00:00",
    "date_end": "2022-07-25 00:00:00",
    "update_state": 1,
    "descript": "You will be given an int as Input.<br>\nYou should find the nearest integer <code>n</code> which is hexadecimal expression is only composed by letters (a,b,c,d,e,f)<br>\nAnd you have to give the difference between the number given as input and <code>n</code><br>\n<br><b><u>Example:</u></b><br>\nThe input is 17<br>\nThe closest number having its hexadecimal expression only composed of letters is 15.<br>\nSo the output should be |17 - 15| = 2\n\nYou will be given an integer <code>m</code> as an input.<br>\nWe denote by <code>n</code> the nearest integer of <code>m</code> which hexadecimal representation is only composed of letters (a,b,c,d,e,f).<br>\nThen you should return the absolute value of the difference between <code>m</code>  and <code>n</code><br>\n<br><b><u>Example:</u></b><br>\nThe input is 17<br>\nThe closest number having its hexadecimal representation only composed of letters is 15 (<code>0xf</code>)<br>\nSo the output should be |17 - 15| = 2<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More infos</div>\n<div id=\"more_info\" style=\"display: none; margin-bottom: -30px; margin-top: 35px\" value=\"0\">\n7 < m < 200 000<br>\n0 ≤ | m - n | < 65 536\n</div>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 23,
    "voters": 3,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 4,
    "title": "Palindromic Range",
    "date_enable": "2022-07-25 00:00:00",
    "date_end": "2022-08-01 00:00:00",
    "update_state": 1,
    "descript": "You will be given one or more int as input, on a single line separated by spaces.<br>\nFor each number <code>n</code>: you have to find out how many palindromic numbers are between 0 and the number concerned <code>n</code>, and transform this number into the corresponding ASCII value and print all chars in one line.<br>\nA palindromic number is a number that remains the same when its digits are reversed.<br>\nMore on that on <a href=\"https://en.wikipedia.org/wiki/Palindromic_number\">Wikipedia.</a>\n<br><b><u>Example:</u></b><br>\nThe input is 556 566<br>\nFirst, in the range [0; 556] there is 65 palindromic numbers, so the first char is A.<br>\nNext, in the range [0; 566] there is 66 palindromic numbers, so the second char is B.<br>\nSo, the output should be: AB<br><br>\n\nNote: The range are always from 0 to a palindrom number + 1<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More infos</div>\n<div id=\"more_info\" style=\"display: none; margin-bottom: -30px; margin-top: 35px\" value=\"0\">\n222 < n < 2664<br>\n0 < number_of_ints < 17\n</div>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 27,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 5,
    "title": "New Alphabet",
    "date_enable": "2022-08-01 00:00:00",
    "date_end": "2022-08-08 00:00:00",
    "update_state": 1,
    "descript": "You will be given several lines as an input.\nThe first line, that we call <code>new_alphabet</code> is a permutation of the 26  letters of the latin alphabet in upper case.<br>\nThe next lines, after<code>new_alphabet</code>, are made of uppercase letters.\nThe goal is to use the following transformation: the n-th letter of the alphabet will be transformed into the n-th letter of <code>new_alphabet</code> on each of the lines after <code>new_alphabet</code>.\n<br><b><u>Example:</u></b><br>\nGiven the following 3 lines:<br>\nCABDEFGHIJKLMNOPQRSTUVWXYZ<br>\nABC<br>\nBANANA<br>\nWe see that the  <code>new_alphabet</code> transforms A in C, B in A, C in B and leaves the other unchanged. So the expected output is the following two lines:<br>\nCAB<br>\nACNCNC<br>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 28,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 6,
    "title": "Tribonacci Triangle",
    "date_enable": "2022-08-08 00:00:00",
    "date_end": "2022-08-15 00:00:00",
    "update_state": 1,
    "descript": "You will be given two numbers as Input. (separated by a space)<br>\nThe first integer is noted <code>a</code> and the second <code>n</code>. The goal is to compute the <code>n</code> first rows of the tribonacci triangle with the first term being <code>a</code><br>\nThe r-th row of the Tribonacci triangle has r numbers.<br>\nThe number corresponding to column c and row r is the sum of the numbers at coordinates (c-1,r-1), (c,r-1) and (c-1,r-2)<br>\n(NB: The numbers that are in the Tribonacci Triangle are called Delannoy. More info about it at <a href=\"https://en.wikipedia.org/wiki/Delannoy_number#Delannoy_array\">Wikipedia</a> or <a href=\"https://www.geeksforgeeks.org/delannoy-number/\">GeeksForGeeks</a>)<br>\n<b><u>Example:</b></u><br>\nIf the input is  \"2 4\", 2 is the firs term, and 4 is the number of rows<br>\nThe first row/line is \"2\"<br>\nThe second row/line is \"2 2\"<br>\nThe third row/line is \"2 6 2\" (6 because, its (c-1, r-1) <=> 2 + (c, r-1) <=> 2 + (c-1, r-2) <=> 2)<br>\nThe last row/line is \"2 10 10 2\" (10 because its 2 + 2 + 6)<br>\nSo the output should be:\n<div style=\"text-align: left; padding-left: 50px;\">\n2 <br>\n2 2 <br>\n2 6 2 <br>\n2 10 10 2 <br>\n</div>\n(NB: the output can be \"2 6 2\" OR \"2 6 2 \")<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More infos</div>\n<div id=\"more_info\" style=\"display: none; margin-bottom: -30px; margin-top: 35px\" value=\"0\">\n0 < n < 16<br>\n0 < a < 16<br>\n</div>",
    "show_case": 7,
    "random_case": 9,
    "sum_votes": 30,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 7,
    "title": "#RGB",
    "date_enable": "2022-08-15 00:00:00",
    "date_end": "2022-08-22 00:00:00",
    "update_state": 1,
    "descript": "You will be given a string as Input.<br>\nThis string correspond to a RGB value written in Hexadecimal.<br>\nIn this problem, you need to tell if a RGB value has more red, green or blue.<br>\nIf all values are under 16 its too dark, and you should output 0<br>\nIf all values are above 239 its too bright, and you should output 1<br>\n\n<br><b><u>Example 1:</u></b><br>\nThe input is \"#05AB1E\"<br>\nThe value of red is 0x05 = 5<br>\nThe value of green is 0xAB = 171<br>\nThe value of blue is 0x1E = 30<br>\nSince the color with the highest value is green, the output should be G<br>\n\n<br><b><u>Example 2:</u></b><br>\nThe input is \"#010203\"<br>\nThe value of red is 0x01 = 1<br>\nThe value of green is 0x02 = 2<br>\nThe value of blue is 0x03 = 3<br>\nSince all colors have a value under 16, the output should be 0",
    "show_case": 17,
    "random_case": 9,
    "sum_votes": 27,
    "voters": 3,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 8,
    "title": "Collatz Mean",
    "date_enable": "2022-08-22 00:00:00",
    "date_end": "2022-08-28 20:00:00",
    "update_state": 1,
    "descript": "Two integers will be given, on a different line as Input.<br>\nThese two numbers define a range.<br>\nThe conjecture of Collatz (or Syracuse) conjectures that each number following the following relation will arrive at 1, at some point:<br>\n- The number becomes itself divided by two if it is even<br>\n- The number becomes (itself times 3) + 1 if it is odd.<br>\nFor each number <code>n</code> in the interval, you have to find the maximum number <code>m(n)</code> in the Collatz series starting at <code>n</code> and make a floored average of all <code>m(n)</code> for <code>n</code> in the initial given interval.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is \"2\n4\"<br>\nThe range is [2;4]<br>\n- 2 is even, so 2 becomes 2 / 2 = 1. And it ends here. The maximum is 2.<br>\n- 3 is odd, so 3 becomes 3*3+1 = 10 => 5 => 16 => 8 => 4 => 2 => 1. The maximum is 16<br>\n- 4 is even, 4 => 2 => 1. The maximum is 4<br>\nThe mean floored of the maximum in this range is (16 + 2 + 4) / 3 = floor( 22 / 3 ) = 7<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 < n < 2 000 000<br>\n0 < m(n) < 10 000 000<br>\n0 < size_of_range < 100\n</div>",
    "show_case": 9,
    "random_case": 9,
    "sum_votes": 38,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 9,
    "title": "American Presidents",
    "date_enable": "2022-08-28 20:00:00",
    "date_end": "2022-09-04 20:00:00",
    "update_state": 1,
    "descript": " Multiple lines will be given as input.<br>\nThe first line will be two strings separated by a space.<br>\nAll the other lines will be 3 integers separated by a space.<br><br>\nThe goal will be to find out which candidate will win the presidential election with the election system in the United States.<br>\nPresidential elections in the United States are like that:<br>\nEach state has a number of electoral votes. The candidate with the most electoral votes at the end wins the election.<br>\nTo win the electorate votes of a state, you only need to have a majority of the votes (by people) in a state.<br>\nWhoever has more votes gets all the electoral votes, and the other gets 0 (for each state)<br>\nThe first line corresponds to the names of the candidates.<br>\nThe other lines correspond to the: Number of votes for candidate 1, Number of votes for candidate 2, Number of electoral votes that the state brings in.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is \"foo bar<br>\n30 40 2<br>\n35 30 3\"<br>\nThe name of the first candidate is foo, the name of the second candidate is bar.<br>\nFirst state: foo has 30 votes. bar has 40 votes. So, bar won 2 electoral votes and foo 0 votes.<br>\nSecond state: foo has 35 votes. bar has 30 votes. So, foo won 3 electoral votes and bar 0 votes.<br>\nEven if in the sum of the voters for bar is greater than for foo, foo has more great electoral votes. Foo has therefore won.<br><br>\nSo the output should be \"foo won\"<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 < number_of_states < 64<br>\n0 < length_of_name < 17<br>\n0 ≤ number_of_electoral_votes ≤ 538<br>\n</div>",
    "show_case": 10,
    "random_case": 7,
    "sum_votes": 27,
    "voters": 3,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 10,
    "title": "Chess Points",
    "date_enable": "2022-09-04 20:00:00",
    "date_end": "2022-09-11 20:00:00",
    "update_state": 1,
    "descript": "8 lines will be given as input.<br>\nEach line will have 8 chars. Each char corresponds to a square on a chessboard.<br>\nAn empty square is either denoted with a space or a # sign. A chess piece is denoted by a letter.<br>\nEach chess piece has a value. To make a fairly simple approximation of who has the advantage in a chess game, we can compare the sum of the values of the pieces of the two players.<br>\nHere are the abbreviations and values for each chess piece:<br>\n- Q for Queen (9 points).<br>\n- R for Rook (5 points).<br>\n- K for King (4 points).<br>\n- B for Bishop (3 points).<br>\n- N for kNight (3 points).<br>\n- P for Pawn (1 point).<br>\nWhite pieces will be written in lower case.<br>\nBlack pieces will be written in upper case.<br>\nIf the sum of the white pieces is superior to the sum of the black pieces, we note the score <code>s</code> to be: +<code>N</code><br>\nIf not; it is noted -<code>N</code><br>\nWith <code>N</code> the difference between the two sums.<br>\nYour objective is therefore to output the score <code>s</code><br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is<br>\n\" # # # #<br>\n# # K # <br>\n # #B# #<br>\n# # # # <br>\n # #q# #<br>\n# # k # <br>\n # # # #<br>\n# # # # \"<br>\nThe white pieces are k and q <=> King and Queen <=> 4 + 9 = 13.<br>\nThe black pieces are K and B <=> King and Bishop <=> 4 + 3 = 7.<br>\nSo the output should be 13 - 7 = +6<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\nThere will always be a King in both sides.<br>\n0 is noted as +0 and not -0<br>\n3 < sum_of_pieces < 108<br>\n0 ≤ <code>N</code> < 104<br>\n</div>",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 66,
    "voters": 7,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 11,
    "title": "Music Notes",
    "date_enable": "2022-09-11 20:00:00",
    "date_end": "2022-09-18 20:00:00",
    "update_state": 1,
    "descript": "You will be given a float as input.<br>\nYour goal, is to convert this float, which is a frequence, to a music note.<br>\nThe musical notes are noted according to the Anglo-Saxon model (C,D,E,F,G,A,B).<br>\nThe function to obtain the n-th note from the frequency is <code>convert(freq) = 12 * log_2 ( freq / 440 ) + 49</code> and rounding this, to the nearest integer<br>\nFrom the n-th note, it is thus possible to know to which musical note it corresponds.<br>\nThe musical notes in this problem will be noted A, A#, B, C, C#, D, D#, E, F, F#, G, G#<br>\nAs there are 12 notes, all 12 notes are the same note regardless of the octaves. For example, the 1st note is an A, the 13th is an A, the 25th is an A etc.<br>\nTo know exactly which note we are talking about, we add the octave number after the name of the note. An octave is a set of 12 notes that are characterized by a number: 0,1,2,3... . On a piano of 88 keys, the octave 0 and 8 are cut.<br>\nHere is an image and a link that might help you:<br>\n<img src=\"img/note_table.png\" style=\"width: 98%\"><br>\n<a href=\"https://en.wikipedia.org/wiki/Piano_key_frequencies\">Wikipedia</a><br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is \"38.9\"<br>\nconvert(freq) = convert(38.9) = 12 * log₂ ( 38.9 / 440 ) + 49 = 12 * -3.449661... + 49 = 7<br>\nThe note we are looking for is the 7th note<br>7 % 12 = 7. The note we are looking for is therefore an D#. ( A, A#, B, C, C#, D, <strong>D#</strong>, E, F, F#, G, G# ) All that remains is to find the octave!<br>\nA simple relation to find the octave is: <code>floor( (note_number + 8) / 12 )</code><br>\nIn this case it will be: floor( (7 + 8) / 12 ) = floor( 15 / 12 ) = 1<br>\nSo the output should be: D#1<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More infos</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"0\">\nlog2(value) = log10(value) / log10(2)<br>\nThere may be given at most one digit after the decimal point.\n27 < frequence < 4200<br>\n0 ≤ octave ≤ 8\n</div>",
    "show_case": 17,
    "random_case": 6,
    "sum_votes": 62,
    "voters": 7,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 12,
    "title": "Prime, Fibo, Fizz",
    "date_enable": "2022-09-18 20:00:00",
    "date_end": "2022-09-25 20:00:00",
    "update_state": 1,
    "descript": "Two integers will be given, on a different line as input.<br>\nThese two numbers <code>a</code> and <code>b</code>, define a range.<br>\nThis problem is a mix between 3 very popular problems: FizzBuzz, Prime and Fibonacci.<br>\n\nFor each number in [<code>a</code>; <code>b</code>]<br>\nif the number:<br>\n- Is prime and is in the Fibonacci Sequence: output PrimeFibo<br>\n- Is prime: output Prime<br>\n- Is in the Fibonacci sequence: output Fibo<br>\n- Doesnt fit in theses cases: the number<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is '5\n8'<br>\n- 5: Is part of the fibonacci sequence and is prime => PrimeFibo<br>\n- 6: Isn't part of the fibonacci sequence and isn't prime => 6<br>\n- 7: Isn't part of the fibonacci sequence and is prime => Prime<br>\n- 8: Is part of the fibonacci sequence and isn't prime => Fibo<br>\nSo the output should be:<br>PrimeFibo<br>6<br>Prime<br>Fibo<br><br>\n\n<div style='font-weight: 900; cursor: pointer; margin-bottom: -35px;'' onclick='moreInfo()'>More info</div>\n<div id='more_info' style='display: block; margin-bottom: -30px; margin-top: 35px' value='1'>\n1 < a ≤ b < 65536<br>\n0 ≤ b - a < 512<br>\n</div>",
    "show_case": 6,
    "random_case": 4,
    "sum_votes": 47,
    "voters": 6,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 13,
    "title": "Divisors comparison",
    "date_enable": "2022-09-25 20:00:00",
    "date_end": "2022-10-02 20:00:00",
    "update_state": 1,
    "descript": "Two integers will be given, on a different line as input.<br>\nThese two numbers <code>a</code> and <code>b</code>, define a range.<br>\nIn this problem, you will have to compare the sum of the divisors of the numbers <br>\nFor each number in the range [<code>a</code>; <code>b</code>], if the sum of the divisors of the next number is greater than the sum of the divisors of the current number then the <code>total</code> gains 1. If it is the opposite then the <code>total</code> loses 1.<br>\nInitially <code>total</code> is set to 0.\n\n<br><b><u>Example:</u></b><br>\nThe input is \"3\n6\"<br>\n- The sum of divisors of 3 is 3 + 1 == 4. The sum of divisors of 4 is 4 + 2 + 1 == 7. So total = total + 1 (because 4 < 7)<br>\n- The sum of divisors of 4 is 7. The sum of divisors of 5 is 6. So total = total - 1 (because 7 > 6)<br>\n- The sum of divisors of 5 is 6. The sum of divisors of 6 is 12. So total = total + 1 (because 6 < 12)<br><br>\nSo the output should be: 1 (because 1 == 1 - 1 + 1)<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 < a ≤ b < 65536<br>\n0 ≤ b - a < 512<br>\n0 ≤ (b - a) * a ≤ 720 764<br>\nIf the sum of two numbers are equals, you should add nothing <=> 0.<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 54,
    "voters": 6,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 14,
    "title": "Not Lychrel",
    "date_enable": "2022-10-02 20:00:00",
    "date_end": "2022-10-09 20:00:00",
    "update_state": 1,
    "descript": "One integer will be given as input.<br>\nThis problem consists in proving that a number is not a lychrel number.<br>\nTo find out if a number <code>n</code> is not a lychrel number, as long as the number <code>n</code> is not a palindrome, we add its mirror (i.e. we swap the order of the numbers) to it. <code>n := n + mirror(n)</code><br>\nIf at any time n is a palindrome, then it is not a lychrel number.<br>\nA proof that a number is not a lychrel number, is to give the number of iterations after which, <code>n</code> became palindrome. So you will have to output this.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is 163<br>\n- 163 + mirror(163) <=> 163 + 361 == 524, 524 is not a palindrome, so we start again<br>\n- 524 + mirror(524) <=> 524 + 425 == 949, now the number is a palindrome, so we have the proof, that 163 is not a lychrel number.<br>\n\nIt took us 2 iterations to prove that 163 was not a lychrel number, so the expected output is 2.<br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 ≤ input < 999 999<br>\n0 ≤ n < 2**31 <i>(Some numbers like 89 require 24 iterations before becoming palindrome => n would become greater than 2**31. 89 will not be tested, like all numbers that would become at some point greater than 2**31)<br></i>\n0 ≤ iteration ≤ 14<br>\nNote: <i>Today we still don't know if the numbers of lychrel exist despite the fact that some numbers have been tested with 1 million iterations without any conclusive result on their non-existence.</i><br>\n</div>",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 25,
    "voters": 3,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 15,
    "title": "Double Persistence",
    "date_enable": "2022-10-09 20:00:00",
    "date_end": "2022-10-16 20:00:00",
    "update_state": 1,
    "descript": "Two integers will be given, on a different line as input.<br>\nWe name these two numbers <code>it</code> and <code>n</code>, they are the number of iterations and the initial number.<br>\n\nFirst, we define \\(f(n)\\) as the digit product plus digit sum of \\(n\\):\n$$f(5432) = (5\\times4\\times3\\times2)+5+4+3+2$$\nIn this problem, we need to generate a list \\(S\\) with initial term \\(n\\) and, where the next term is \\(f(n)\\), \\(it\\)-times:\n$$S = [n, f(n), f(f(n)), \\dots]$$\n\nSecondly, now that we have this list, we introduce another function \\(g(n)\\) as the number obtained by splitting the digits of \\(n\\) into pairs, and summing the products of each pair, possibly adding an unpaired digit at the end:\n$$g(5432) = (5 \\times 4) + (3 \\times 2)$$\n$$g(54321) = (5 \\times 4) + (3 \\times 2) + 1$$\n\nThe output should be \\(S[i]\\) where \\(g(S[i])\\) is the maximal value (guaranteed to be unique).<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is \"2\\n975\"<br>\nThe first term is therefore 975.<br>\nThe second term will be: 9*7*5 + 9+7+5 == 336. The second term is 336<br>\nThe last term will be: 3*3*6 + 3+3+6 == 66<br>\nWhen you convert each element of the array with the formula, the array becomes:<br>\n[975, 336, 66] => [9*7+5, 3*3+6, 6*6] => [68, 15, 36]<br>\nThe maximal value is therefore 68, the number that lead to 68 was 975, so the output should be 975.<br><br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 < it < 100<br>\n1 ≤ n < 2**31<br>\n</div>",
    "show_case": 12,
    "random_case": 6,
    "sum_votes": 27,
    "voters": 3,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 16,
    "title": "Basic Sequence",
    "date_enable": "2022-10-16 20:00:00",
    "date_end": "2022-10-23 20:00:00",
    "update_state": 1,
    "descript": "Three integers will be given, on a different line as input.<br>\nThese three numbers, <code>a</code>, <code>b</code>, <code>c</code> define the first three terms of a sequence noted <code>u</code>.<br>\nThe sequence will be either arithmetic or geometric.<br>\nAn arithmetic sequence is of the form: <code>u_(n+1) = u_n + k</code> with <code>k</code> a constant.<br>\nA geometric sequence is of the form: <code>u_(n+1) = u_n * k</code> with <code>k</code> a constant.<br>\nWith the first three terms, you can easily extend the sequence.<br>\nIn this problem, we will take the first 12 terms of the sequence <code>u</code>, its sum will be noted s.<br>\nThen we create a list <code>L</code> which is composed of 12 terms, each term of the sequence <code>u</code> XOR <code>s</code>.<br>\nThe final output, must be the difference between the maximum and the minimum of <code>L</code><br>\n\n<br><b><u>Example 1:</u></b><br>\nThe input is \"1\n5\n9\"<br>\n9 - 5 == 4, and 5 - 1 == 4.<br>\nIt is therefore an arithmetic sequence.<br>\nThe first 12 terms of <code>u</code> will be: 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45<br>\nThe sum of this sequence is 276.<br>\nL will therefore be: 1^276, 5^276, 9^276... = 277, 273, 285, 281, 261, 257, 269, 265, 309, 305, 317, 313<br>\nThe difference between the maximum and minimum is: 317 - 257 = 60<br>\nSo the output should be 60<br>\n\n\n<br><b><u>Example 2:</u></b><br>\nThe input is \"1\n2\n4\"<br>\n4 / 2 == 2, and 2 / 1 == 2.<br>\nIt is therefore a geometric sequence.<br>\nThe first 12 terms of <code>u</code> will be: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048<br>\nThe sum of this sequence is 4095.<br>\nL will therefore be: 1^4095, 2^4095, 4^4095... = 4094, 4093, 4091, 4087, 4079, 4063, 4031, 3967, 3839, 3583, 3071, 2047<br>\nThe difference between the maximum and minimum is: 4094 - 2047 = 2047<br>\nSo the output should be 2047<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n-2048 ≤ a, b, c ≤ 2048<br>\n0 ≤ maximum of <code>L</code> ≤ 2**31<br>\nIf the sequence is geometric: k ≠ 0<br>\n!(a==0 && b==0 && c==0)\n</div>",
    "show_case": 9,
    "random_case": 6,
    "sum_votes": 27,
    "voters": 4,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 17,
    "title": "Candies for Halloween",
    "date_enable": "2022-10-23 20:00:00",
    "date_end": "2022-10-30 20:00:00",
    "update_state": 1,
    "descript": "Multiple lines will be given as input.<br>\nOn Halloween, some people like to look for candy. So the goal of this problem is to determine how many candies people are collecting!<br>\nThe first line, <code>instructions</code>, will be a sequence of instructions composed of the letters: B (bottom), T (top), L (left), R (right)<br>\nThe other lines, form a map. The map is composed of 3 symbols: X (always be in the upper left corner of the map), - (dash), and O. X represents the player, a dash represents a place without a candy, and O a place with a candy.<br>\nFor each letter in <code>instructions</code>, the player has to move in a certain direction on the map.<br>\nThe coordinates will always be valid. Example: there will be no letters 'L' when the player is already at index 0 (or 1 if you do Lua or R) of any line.<br>\nIf you pass over a square with candy, the candy will not be there if you pass over it again.<br>\nThe map will always be a square and all lines have the same length <=> length of a line == number of lines.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is '<code>RBT<br>\nXO<br>\n-O</code>'<br>\nWe start at the top left, as always.<br>\nSo we go to the right, and we find a candy! Our candy counter is now at 1.<br>\nThe second letter is B, we go down one square, and we find another candy! So the counter goes to 2.<br>\nThe last letter is T so we go top and we are back to where we were before. However, since we have already passed this square, we don't win any new candy.<br>\nThe output is therefore 2.<br>\n\n\n\n\n<div style='font-weight: 900; cursor: pointer; margin-bottom: -35px;' onclick='moreInfo()'>More info</div>\n<div id='more_info' style='display: block; margin-bottom: -30px; margin-top: 35px' value='1'>\n2 ≤ length of a line ≤ 9<br>\n2 ≤ number of lines ≤ 9<br>\n1 ≤ <code>instructions</code> ≤ 99<br>\n</div>",
    "show_case": 12,
    "random_case": 6,
    "sum_votes": 48,
    "voters": 5,
    "lotw": "raku",
    "example": null,
    "more_info": null
  },
  {
    "id": 18,
    "title": "Little Red Riding Hood",
    "date_enable": "2022-10-30 20:00:00",
    "date_end": "2022-11-06 20:00:00",
    "update_state": 1,
    "descript": "4 integers will be given as input.<br>\n\"Little Red Riding Hood\" is a European fairy tale about a young girl and a sly wolf.<br>\nThe little girl has to get to a safe place to avoid being eaten by the wolf, and as soon as possible!<br>\nThe first two integers are the X and Y coordinates of the little girl. The next two integers are the integers representing coordinates X and Y of the nearest safe location<br>\nHelp the little girl by telling her where to go!<br>\nTo tell her to move down, you have to say D, to tell her to move up U, right R and left L.<br>\nShe can also go diagonally. For example, if she is in 2,2 and the safe place is in 1,1 you have to tell her \"DL\" directly.<br>\nYou must first make the little girl go diagonally if she has to go diagonally, then straight. To indicate the diagonals, you must first say \"U\" or \"D\" and then \"R\" or \"L\"<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is \"1 1 4 3\"<br>\nThe little girl is at X: 1, Y:1<br>\nThe safe place is at X:4, Y:3<br>\nAs none of the X and Y coordinates of the little girl are equal to that of the safe place, you have to go diagonally.<br>\nIn this case: \"UR\" => Y=Y+1 and X=X+1. Our coordinates become X: 2, Y: 2<br>\nWe apply the same reasoning and we have \"UR\" again, X: 3, Y: 3<br>\nHowever now we notice that we are in phase with the Y coordinate of the safe place. No need to go to the top this time, but only to the right.<br>\nWe just need to tell the little girl to go to the right by saying \"R\".<br>\nThe output should be:<br>\nUR<br>\nUR<br>\nR<br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 ≤ X, Y ≤ 100<br>\n1 ≤ instructions to the little girl ≤ 100<br>\n</div>",
    "show_case": 10,
    "random_case": 6,
    "sum_votes": 18,
    "voters": 2,
    "lotw": "python",
    "example": null,
    "more_info": null
  },
  {
    "id": 19,
    "title": "How evil ?",
    "date_enable": "2022-11-06 20:00:00",
    "date_end": "2022-11-13 20:00:00",
    "update_state": 1,
    "descript": "You will be given a integer as Input.<br>\nAn integer is considered <i>evil</i> if the number of 1's in its binary expression is even. Otherwise, the number is said to be <i>odious</i>.\nIn this problem we are interested in how evil or odious a number is:<br>\n- If the number is odious and the number of 1 in its binary expression is odious, its a \"big\" odious, so it should be \"ODIOUS\"\n- If the number is odious but the number of 1 in its binary expression isnt odious, its just a \"small\" odious, so it should be \"odious\"\n- If the number is evil but the number of 1 in its binary expression isnt evil, its just a \"small\" evil, so it should be \"evil\"\n- If the number is evil and the number of 1 in its binary expression is evil, its a \"big\" evil, so it should be \"EVIL\"\n\n<br><b><u>Example 1:</u></b><br>\nThe input is \"10\"<br>\nThe binary expression of 10 is 1010, therefore we can see that it has two 1<br>\nAnd two, is even, so the number is evil.<br>\nThe binary expression of the number of 1 in 10 which is 2, is 10. in 10, there is only one 1, so 2 isnt an evil number.<br>\n10 being evil, but its number of 1's not, the output is therefore \"evil\".\n\n<br><b><u>Example 2:</u></b><br>\nThe input is \"16\"<br>\nThe binary expression of 16 is 10000, therefore we can see that it has one 1 => odious.\nThe binary expression of the number of 1, in 1, is 1 => odious again<br>\n16 being odious, and its number of 1's too, the output is therefore \"ODIOUS\".\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 ≤ input value < 65536<br>\n</div>",
    "show_case": 11,
    "random_case": 8,
    "sum_votes": 22,
    "voters": 3,
    "lotw": "c",
    "example": null,
    "more_info": null
  },
  {
    "id": 20,
    "title": "Game of Life",
    "date_enable": "2022-11-13 20:00:00",
    "date_end": "2022-11-20 20:00:00",
    "update_state": 1,
    "descript": "You will be given a 10 lines as input.<br>\nEach line will be composed of 10 chars.<br>\nThe characters will be either # or .<br>\nAnd as you may have gathered from the title, this problem is about the game of life.<br>\nIf we consider the 10 lines of 10 chars as a 'board', then we can make a simulation of the game of life. In this exercise, we will be interested in producing the t+1 state of the 'board'.<br>\nA box with a # corresponds to a cell with life, a dot corresponds to a cell without life.<br>\nTo know if a cell in the following state is a living or dead cell, here are the rules:<br><br>\n\n- Any live cell with fewer than two live neighbours dies, as if by underpopulation.<br>\n- Any live cell with two or three live neighbours lives on to the next generation.<br>\n- Any live cell with more than three live neighbours dies, as if by overpopulation.<br>\n- Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is<br>\n<code>..........<br>\n..........<br>\n..........<br>\n....#.....<br>\n.....#....<br>\n...###....<br>\n..........<br>\n..........<br>\n..........<br>\n..........<br></code>\nThis is a typical example of a glider.<br>\nAs it is long to explain, if you don't understand how it works, I invite you to look at these pages:<br>\n<a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life'>Wikipedia</a> and <a href='https://conwaylife.com/wiki/Glider'>LifeWiki</a><br>\n\nSo the output should be<br>\n<code>..........<br>\n..........<br>\n..........<br>\n...#.#....<br>\n....##....<br>\n....#.....<br>\n..........<br>\n..........<br>\n..........<br></code>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 20,
    "voters": 2,
    "lotw": "APL",
    "example": null,
    "more_info": null
  },
  {
    "id": 21,
    "title": "Small Language",
    "date_enable": "2022-11-20 20:00:00",
    "date_end": "2022-11-27 20:00:00",
    "update_state": 1,
    "descript": "    You will be given a many lines as input.<br>\n    Each line will be an instruction.<br>\n    The goal of this problem is to simulate a small programming language. In this \"programming language\" you have only one value, <code>v</code>, that you can modify and that has its initial value set to 0.<br>\n    There will be 7 different types of instructions:<br>\n    - INC: that increment <code>v</code> of 1\n    - DEC: that decrement <code>v</code> of 1\n    - DBL: that multiply <code>v</code> by 2\n    - HLF: that divide and floor <code>v</code> by 2\n    - NEG: that multiply <code>v</code> by -1\n    - SAY: that prints <code>v</code> to the STDIN\n    - EXT: that makes the program crash<br>\n\n\n    <br><b><u>Example:</u></b><br>\n    The input is<br>\n    <code>\n    INC<br>\n    DBL<br>\n    DBL<br>\n    DEC<br>\n    HLF<br>\n    NEG<br>\n    SAY<br>\n    EXT<br>\n    SAY\n    </code><br>\n    This can written as:<br>\n    <code>\n    INC (v = v + 1 => 1)<br>\n    DBL (v = v * 2 => 2)<br>\n    DBL (v = v * 2 => 4)<br>\n    DEC (v = v - 1 => 3)<br>\n    HLF (v = floor (v / 2) => 1)<br>\n    NEG (v = -v => -1)<br>\n    SAY (print -1)<br>\n    EXT (ends the program)<br>\n    SAY (is not executed because the program is over)<br>\n    </code>\n    So the output should be -1<br><br>\n\n\n    <div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n    <div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n    1 ≤ instructions ≤ 100<br>\n    0 ≤ SAY instruction ≤ 10<br>\n    0 ≤ EXT instruction ≤ 10<br>\n    - (2 ** 10) ≤ v ≤ 2 ** 10<br>\n    </div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "Perl",
    "example": null,
    "more_info": null
  },
  {
    "id": 22,
    "title": "Extend & Delete",
    "date_enable": "2022-11-28 20:00:00",
    "date_end": "2022-12-04 20:00:00",
    "update_state": 1,
    "descript": "You will be given a string of digits as input.<br>\nAnd as you may have gathered from the title, this problem has two parts.<br>\nThe first part is about adding number to the string. The second part is about deleting.<br>\nWe will define <code>n</code> as (the sum of the digits in the string) % length of string.<br>\nFirst part:<br>\nWhile <code>n</code> isn't in the string, add <code>n</code> to the string.<br>\nSecond part:<br>\nWhile <code>n</code> is in the string, delete all occurrences of <code>n</code> from the string.<br>\n<b>NOTE:</b> If there is the string \"111\" and that <code>n</code> is 11, \"111\" should become \"1\" and not \"\".<br>\nThe output should be the final string.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is 28<br>\nFirst part:<br>\n(2 + 8) % 2 == 10 % 2 == 0. 0 isn't in \"28\", so 28 => 280.<br>\n(2 + 8 + 0) % 3 == 10 % 3 == 1. 1 isn't in \"280\", so 280 => 2801.<br>\n(2 + 8 + 0 + 1) % 4 == 11 % 4 == 3. 3 isn't in \"2801\", so 2801 => 28013.<br>\n(2 + 8 + 0 + 1 + 3) % 5 == 14 % 5 == 4. 4 isn't in \"28013\", so 28013 => 280134.<br>\n(2 + 8 + 0 + 1 + 3 + 4) % 6 == 18 % 6 == 0. 0 is in \"280134\", so the first part stops.<br>\nSecond part:<br>\n0 is in \"280134\", so \"280134\" => \"28134\".<br>\n(2 + 8 + 1 + 3 + 4) % 5 == 18 % 5 == 3. 3 is in \"280134\", so \"28134\" => \"2814\".<br>\n(2 + 8 + 1 + 4) % 4 == 15 % 4 == 3 (again). But 3 isn't in the string (\"2814\") anymore.<br>\nSo the output should be \"2814\"<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 ≤ n ≤ 25<br>\n1 ≤ length of original string ≤ 11<br>\n0 ≤ length of string ≤ 25<br>\nThe final string can be an empty string (in the case where the input is 0 for example)<br>\nAll digits in the origin string don't have to be unique. 11 is a valid input for example.<br>\n</div>",
    "show_case": 9,
    "random_case": 6,
    "sum_votes": 17,
    "voters": 2,
    "lotw": "BQN",
    "example": null,
    "more_info": null
  },
  {
    "id": 23,
    "title": "Stylish calendar",
    "date_enable": "2022-12-04 20:00:00",
    "date_end": "2022-12-11 20:00:00",
    "update_state": 1,
    "descript": "You will be given an int <code>n</code> and <code>n</code> strings of digits as input.<br>\nTherefore, n will correspond to the number of lines and the strings will be composed of \"#\" and spaces.<br>\nThe goal of this problem will be to transform the schema of a calendar into a numbered calendar that can be easily read and understood by humans.<br>\nCalendars are read from left to right and from top to bottom.<br>\nAnd every time you meet a #, the day increases.<br>\nFor the display to be nice, and well aligned, there will be a space between each number and the numbers less than 10 will have a zero in front of them (4 => 04)<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is:<br>\n<code style=\"white-space: pre\">\n6\n     ##\n#######\n#######\n#######\n#######\n#      \n</code>\nFirst line:\nWe have 5 emptys cells, which <=> 5 empty days for our display. And after that, we have the first day, which will be the day 1. But 1 < 10, so we put a 0 in front of 1 so its 2 char long. And after that we make a space.<br>\nAnd it's the same thing with all days after that<br>\n\n\n<code style=\"white-space: pre\">\n               01 02\n03 04 05 06 07 08 09\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31                  \n</code>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n4 ≤ n ≤ 6<br>\n28 ≤ numbers of days ≤ 31<br>\nExtra whitespaces aren't counted<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 10,
    "voters": 1,
    "lotw": "Sass",
    "example": null,
    "more_info": null
  },
  {
    "id": 24,
    "title": "Code breaker",
    "date_enable": "2022-12-11 20:00:00",
    "date_end": "2022-12-18 20:00:00",
    "update_state": 1,
    "descript": "You will be given many lines as input.<br>\nThe first line will be one line in uppercase.<br>\nAll the other lines will be the lines to decipher.<br>\nThe first line given as input will correspond to the single most present letter in the deciphered message (combining upper and lower case letters)<br>\nAll lines are encrypted with the Ceaser cipher, in other words each letter corresponds to a letter in the alphabet at the position of the letter itself + <code>k</code> (a constant).<br>\n<code>k</code> is therefore the difference between the letter most present in the original string and the letter most present in the destination string.<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is:<br>\n<code>\nE\nIqqw\nSaxr!</code>\nThe most common letter on the original string is E. And the letter in the string to decipher is q (with 2 occurrences).<br>\nTo go from Q => E you need to go back of 12 characters!<br>\nI - 12 = W (When you leave the alphabet you go either to the beginning or the end depending on where you leave)<br>\nq - 12 = e<br>\n...<br>\nr - 12 = f<br>\n! (! and \n aren't in the alphabet, so you don't change them!)<br>\nSo the output should be <code>Week\nGolf!</code><br><br>\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ length_string < 1000<br>\nThis idea of problem comes from Aleph Squirrel\n</div>",
    "show_case": 10,
    "random_case": 0,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "Haskell",
    "example": null,
    "more_info": null
  },
  {
    "id": 25,
    "title": "Nice string",
    "date_enable": "2022-12-18 20:00:00",
    "date_end": "2022-12-25 20:00:00",
    "update_state": 1,
    "descript": "You will be given a string in lower case of letters as input.<br>\nThe goal of this problem is to tell if a string is a \"nice string\" or not<br>\nA nice string is a string that:<br>\n- Has at least 3 vowels (vowels are \"aeiou\" here)<br>\n- Has at least once, two identical letters next to each other (\"aa\", \"bb\", \"cc\", ...)<br>\n- Doesn't have two letters that follow each other in the alphabet next to each other in the string. (\"ab\", \"bc\", \"cd\", ..., \"yz\")<br>\nIf the string is a nice string the output should be \"nice string\", else \"bad string\".<br>\n\n<br><b><u>Example 1:</u></b><br>\nThe input is \"merrychristmas\"<br>\n- merrychristmas has at least 3 vowels (e, i, a).\"<br>\n- merrychristmas has as 2 indentical letters next to each other (rr).\"<br>\n- But, merrychristmas has two letters that follow each other in the alphabet next to each other in the string: \"st\" so it's not a good string.\"<br>\nSo the output should be \"bad string\".\"<br>\n\n\n<br><b><u>Example 2:</u></b><br>\nThe input is \"franciaargentina\"<br>\n- franciaargentina has at least 3 vowels (a, i, a, a, e, i, a).\"<br>\n- franciaargentina has as 2 indentical letters next to each other (aa).\"<br>\n- franciaargentina doens't have two letters that follow each other in the alphabet next to each other in the string<br>\nSo the output should be \"good string\".\"<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\nA nice string can have 3 times the same vowel:<i>\"aaa\" is a nice string.</i><br>\n</div>",
    "show_case": 10,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "javascript",
    "example": null,
    "more_info": null
  },
  {
    "id": 26,
    "title": "Happy New Year 2023",
    "date_enable": "2022-12-25 20:00:00",
    "date_end": "2023-01-01 20:00:00",
    "update_state": 1,
    "descript": "You will be given two integers as input.<br>\nThese two numbers define a range.<br>\nWe define a cullen number to be <code>C(n) = n * (2 ** n) + 1</code><br>\n\nAnd at the beginning we define a variable <code>s</code> which is going to be a sum.<br>\n\nFor each number <code>i</code> in this range:<br>\nWe add the <code>i%25</code> cullen number to <code>s</code>.<br>\nTo avoid overflow problems, s => s % (2**16)<br>\nAnd after that, we search if there are the numbers \"2\" \"0\" and \"3\" in s.<br>\nIf there are \"2\", \"0\" and \"3\", we print \"2023!\" and exit the program.<br>\nAnd if this condition has never been met throughout the program, we print \"2022!\".<br><br>\n\n<b>BONUS:</b><br>\nFor your program to work, your program need to have all the characters in \"HappyNewYear2023\"<br>\n(<i>comments can be used, and the letters aren't case sensitive</i>)<br>\n\n\n<br><b><u>Example:</u></b><br>\nThe input is \"65<br>66\"<br>\nIn the first place, we add (65%25) * (2 ** (65%25)) + 1 to <code>s</code><br>\ns += 15 * 2 ** 15 + 1 = 15 * 32768 + 1 = 491521 % (2**16) = 32769. There is a 2 and a 3 in 32769 but not any 0. So we move to the next number<br>\ns += 16 * 2 ** 16 + 1 = 32769 + 1048577 = (1081346)%(2**16) = 32770. In this number there is a 2, a 3 and a 0. So we stop there and the output is \"2023!\"<br>\nIf there had not been one of these numbers, we would have had to write 2022!<br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ range_size ≤ 99<br>\nminimum_start_range = 0<br>\nmaximum_end_range = 99<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 10,
    "voters": 1,
    "lotw": "ruby",
    "example": null,
    "more_info": null
  },
  {
    "id": 27,
    "title": "Crush Letter",
    "date_enable": "2023-01-01 20:00:00",
    "date_end": "2023-01-08 20:00:00",
    "update_state": 1,
    "descript": "You will be given one string as input.<br>\nThis problem is a bit like candy crush but in one dimension.<br>\nFor those who have never played Candy Crush, the rule of the game is that the boxes with the same content and being next to each other disappear.<br>\nSo we will have a string, and when there are characters that are the same and that are in a row, we must delete them! And when they are deleted, we look again if there are characters that are the same and next to each other and we start again<br>\nThe output should be the string when everything has been removed.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is \"ACEDDEFFECBCA\"<br>\nFirst, we can see that there is \"DD\" and \"FF\".<br>\nSo we delete them and the string becomes \"ACEEECBCA\"<br>\nSecond, we can see that there is \"EEE\".<br>\nSo we delete it and the sting becomes \"ACCBCA\"<br>\nFinally, we can see that there is \"CC\".<br>\nSo we delete it and the string becomes \"ABCA\"<br>\nAs there are no more characters that are the same and next to each other, we return \"ABCA\"<br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ length_string ≤ 99<br>\nThe string is composed of characters of the alphabet in upper case<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "kotlin",
    "example": null,
    "more_info": null
  },
  {
    "id": 28,
    "title": "Consecutive Integers",
    "date_enable": "2023-01-08 20:00:00",
    "date_end": "2023-01-15 20:00:00",
    "update_state": 1,
    "descript": "You will be given a integer as input.<br>\nSome positive integers can be written as the sum of two consecutive positive integers.<br>\nThe goal of this problem is to print the longest sequence of consecutive positive integers whose sum is equal to the number given as input.<br>\nThe output must therefore be the sequence of integers separated by + in ascending order.<br>\nIf it is not possible to write an integer as two separate integers, just write the number.<br>\n\n\n<br><b><u>Example:</u></b><br>\n6 => 1+2+3<br>\n8 => 8<br>\n9 => 2+3+4<br>\n25 => 3+4+5+6+7<br>\n72 => 4+5+6+7+8+9+10+11+12<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ input_value < 512<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 10,
    "voters": 1,
    "lotw": "k",
    "example": null,
    "more_info": null
  },
  {
    "id": 29,
    "title": "Valid Spiral",
    "date_enable": "2023-01-15 20:00:00",
    "date_end": "2023-01-22 20:00:00",
    "update_state": 1,
    "descript": "You will be given a \"matrix\" as input.<br>\nThe input matrix has each row that has the same size.<br>\nThe goal of this problem is to tell if the matrix is a valid clockwise spiral.<br>\nThe first term is always 0 and is at the top left.<br>\nA clockwise spiral is defined if the next term, clockwise, is the current term + 1.<br>\nIf it is, you should output \"valid\" else, \"invalid\"<be>\n\n<br><b><u>Example 1:</u></b><br>\n<code>00 01 02<br>\n07 08 03<br>\n06 05 04</code><br>\nIn this example, it's a valid matrix. So the output should be \"valid\"<br>\n\n<br><b><u>Example 2:</u></b><br>\n<code>00 01 02 03<br>\n09 10 99 04<br>\n08 07 06 05</code><br>\nIn this example, it's an invalid matrix, because it goes from 10 to 99. So the output should be \"invalid\"<br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ columns ≤ 99<br>\n1 ≤ lines ≤ 99<br>\n1 ≤ terms ≤ 99<br>\n</div>",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "julia",
    "example": null,
    "more_info": null
  },
  {
    "id": 30,
    "title": "Osu! points",
    "date_enable": "2023-01-22 20:00:00",
    "date_end": "2023-01-29 20:00:00",
    "update_state": 1,
    "descript": "You will be given 2 lines as input.<br>\n<a href=\"https://en.wikipedia.org/wiki/Osu!\">Osu!</a> is a rythm game, where you need to click circles.<br>\nThe goal of this problem is to find the score of a player.<br>\nIn osu! there are 4 types of possible points when you click a circle:<br/>\n- 300 points when you click the note at ±50ms<br/>\n- 100 points when you click the note at ±100ms<br/>\n- 50 points when you click the note at ±150ms<br/>\n- 0 points when you're too late + combo break<br/>\n\"Combo break\" means a loss of combo. Indeed, when we click on a note in time, the combo increases by 1.<br>\nThe combo serves as a multiplier. The formula for the score with the combo is:<br>\n<code>\nscore += initial_points * (1 + combo / 25)\n</code><br>\nTo get back to the problem, the first line will be integers separated by a space representing the notes in the game<br>\nThe second line will also be integers separated by a space and it will represent when the user clicks.<br>\nThe goal will be to find the score floored of the player with this.<br>\nNote: a user can click when there are no notes, without it counting as a loss of combo.<br>\n\n\n<br><b><u>Example:</u></b><br>\n<code>0 1000 2000 3000 4000<br>\n14 727 1085 2139 3161 3993</code><br>\n<b>First</b>, there is a note at 0ms. And we can see that the user clicked at 14ms. The difference between the note and the click being less than 50ms it's 300 points. The combo being 0, the score becomes: <code>300 * (1 + 0 / 25)</code> = <code>300</code>.<br>\n<b>Secondly</b>, there is a note at 1000ms, the user clicked at 727ms but also at 1085ms. 1085 being closer than 727, 1085 will count. The difference between the note and the click being more than 50ms but less than 100ms it's 100 points. The combo being 1, the score becomes: <code>score + 100 * (1 + 1 / 25)</code> = <code>score + 104</code> = <code>404</code>.<br>\n<b>Thirdly</b>, there is a note at 2000ms, the user clicked at 2139ms. The difference between the note and the click being more than 100ms but less than 150ms it's 50 points. The combo being 2, the score becomes: <code>score + 50 * (1 + 2 / 25)</code> = <code>score + 54</code> = <code>458</code>.\n<b>Fourthly</b>, there is note at 3000ms and no click at more or less 150ms (3161 - 3000 = 161), so the combo breaks, and the user doesn't get any points.<br>\n<b>Finally</b>, there is a note at 4000ms. And we can see that the user clicked at 3993ms. The difference between the note and the click being less than 50ms it's 300 points. The combo being 0 (because of the miss), the score becomes: <code>score + 300 * (1 + 0 / 25)</code> = <code>758</code>.<br>\nSo the output should be: 758<br><br>\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n0 ≤ combo ≤ 1000<br>\n0 ≤ score ≤ 6 294 000<br>\n1 ≤ clicks ≤ 1000<br>\n</div>",
    "show_case": 5,
    "random_case": 1,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "c#",
    "example": null,
    "more_info": null
  },
  {
    "id": 31,
    "title": "Rule of String",
    "date_enable": "2023-01-29 20:00:00",
    "date_end": "2023-02-05 20:00:00",
    "update_state": 1,
    "descript": "You will be given 2 lines as input.<br>\nThe first line will be an integer <code>iter</code>, and the second line a string of ASCII characters.<br>\nThe purpose of this problem will be, first, to find the ascii value of each character and convert this value into binary.<br>\nNext, we add the binary expression of each character as strings (0 + 1 => 01).<br>\nWe therefore obtain a long string of characters containing 0s and 1s.<br>\nFrom there, we will follow a rule, for each character of the string:<br>\nIf it is surrounded by the same character (0 or 1), it becomes 1, if it is surrounded by a different character, it becomes 0.<br>\n(For the first character, we will compare the second and the last, and for the last we will compare the penultimate and the first)<br>\nAfter having applied <code>iter</code> times this change to the string, we convert it again into an array of value which will becomes a string<br>\n<b>Note</b>: in this problem, as we only use ascii characters, and ascii characters being coded on 7 bits, it will be necessary that each character has a binary expression which is 7 characters long. So 1 => 0000001, 101 => 0000101, 111111 => 0111111 etc.<br>\n\n\n<br><b><u>Example:</u></b><br>\n<code>1<br>\nd!</code><br>\nThe ascii value of d is 100 (in binary 1100100) and the ascii value of ! is 33 (in binary 0100001).<br>\nWhen we add the two binary expressions as a string we have 11001000100001.<br>\nNow we need to apply the rule:<br>\nFirst character, because it's the first one, we compare the second character and the last one. They are both 1, so in the new string, the first char will be a 1.<br>\nSecond character, we compare the first and the third char. The first char is 1, and the third is 0. They are different, so in the new string the second char will be a 0.<br>\n...<br>\nLast character, because it's the last one, we compare the second last character with the first one. They are different, so in the new string, the last char will be a 0.<br>\n<code>iter</code> being only 1, we won't apply these changes again.<br>\nIf <code>iter</code> was 2, we should apply the rule on the string we just got<br>\nFollowing the obtained rule, we get: 10001010101100<br>\nTo convert this to the desired string, we need to take them 7 by 7.<br>\nThe first 7 characters are 1000101. In decimal, this is 69, and ascii character 69 is: 'E'<br>\nThe following 7 characters are 0101100. In decimal, this is 44, and the ascii character 44 is: ','<br>\nThe expected output is therefore \"E,\"<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ iter ≤ 10<br>\n1 ≤ length_string ≤ 100<br>\n32 ≤ ascii_value ≤ 127<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "j",
    "example": null,
    "more_info": null
  },
  {
    "id": 32,
    "title": "Alphabetical Substring",
    "date_enable": "2023-02-05 20:00:00",
    "date_end": "2023-02-12 20:00:00",
    "update_state": 1,
    "descript": "You will be given a string as input.<br>\nThe goal of this problem is to find the longest substring following the alphabet and to output the letter at the start of the longest substring following the alphabet.<br>\nThe substring can loop from z => a (example: ...xyzabc... is valid)<br>\n\n<br><b><u>Example:</u></b><br>\n<code>abcdeefxyzabc</code><br>\nWe can see that from a to e, it's the start of the alphabet, and it has a length of 5. After the e, there is another e, but it doesn't count as the previous alphabet.<br>\nAfter the e, we have a f. Which is of length 2 (ef).<br>\nFinally, we have (xyzabc) which is of length 6. And it counts as a valid substring following the alphabet.<br>\nHere is how you can visualize the string:<br>\n[abcde][ef][xyzabc]<br>\nSo the output should be x because it's the first letter of xyzabc<br>\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ length_string ≤ 256<br>\n</div>",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 8,
    "voters": 1,
    "lotw": "vyxal",
    "example": null,
    "more_info": null
  },
  {
    "id": 33,
    "title": "Matching Customers",
    "date_enable": "2023-02-12 20:00:00",
    "date_end": "2023-02-19 20:00:00",
    "update_state": 1,
    "descript": "You will be given many integers on different lines as input.<br>\nEach integer corresponds to the day interval at which a customer comes to a store.<br>\nIn this problem we are interested in how many times in the year the customers will all cross each other at the same time, knowing that on the first day of the year, they all crossed each other.<br>\nYour goal is therefore, from the data, to find how many times they will all cross at the same time this year, knowing that they crossed on January 1, 2023 (There are only 365 days in 2023)<br>\n\n\n\n<br><b><u>Example:</u></b><br>\nThe input is: \"<code>2<br>\n3<br>\n6<br>\n18</code>\"<br>\nThe first customer comes every 2 days. (Jan 1st, Jan 3rd, Jan 5th...)<br>\nThe second customer comes every 3 days. (Jan 1st, Jan 4th, Jan 7th...)<br>\nThe third customer comes every 6 days. (Jan 1st, Jan 7th, Jan 13th...)<br>\nThe fourth customer comes every 18 days. (Jan 1st, Jan 19th, Feb 7th...)<br>\nWe can see that on several occasions, the first three clients all cross paths at the same time (Jan 7th, Jan 13th, ...), however, the fourth client is not present on those days. So those days do not count as valid.<br/>\nThis example is very simple, because every time that the fourth customer comes, the other three are also here. So we can simply do 365 / 18 = 20.27777.<br>\nBut because they met the first day, it will be <code>ceil(365/18)</code> = <code>21</code>, so the output should be 21.\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n2 ≤ customers ≤ 64<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "scala",
    "example": null,
    "more_info": null
  },
  {
    "id": 34,
    "title": "Suffixes to String",
    "date_enable": "2023-02-19 20:00:00",
    "date_end": "2023-02-26 20:00:00",
    "update_state": 1,
    "descript": "You will be given many string as input.<br>\nThe first string is the main string <code>s</code>.<br>\nThe other strings will be part of the <code>l</code> string list.<br>\nThe goal of this problem is to find the minimum number of suffixes (belonging to a string in <code>l</code>) that we need to reproduce the string <code>s</code>.<br>\nThe suffix of a string in this problem is simply defined as a substring of the string that is located at the end of the string. (\"bc\" is a suffix of \"abc\". \"bc\" isn't a suffix of \"abcd\")<br>\nWe will also define that a suffix of the string can be the string itself. (\"abc\" can be a suffix of \"abc\")<br>\nIt is possible to use the same suffix several times. It is possible to use different suffixes of the same string.<br>\nIf it is not possible to reproduce the string with the string suffixes, then the output must be -1.<br>\n\n<br><b><u>Example:</u></b><br>\nThe input is: \"nowayy<br>\nnorway<br>\nvolcano\"<br>\nThe string <code>s</code> is \"nowayyy\".<br>\nAnd the list <code>l</code> has the string \"norway\" and \"volcano\".<br>\nSo, we need to reproduce \"nowayyy\" with smallest amount of suffixes of \"norway\" and \"volcano\".<br>\nWe can see that a suffix of \"volcano\" is \"no\", and there isn't any string that has \"now\", \"nowa\", \"noway\", \"nowayy\", \"nowayyy\" as a suffix. (+1)<br>\nNow, we need to reproduce \"wayyy\", and we can see that a suffix of \"norway\" is \"way\" and there aren't any string that has \"wayy\" or \"wayyy\" as a suffix. (+1)<br>\nNow, we need to reproduce \"yy\". We can simply reproduce it by using two times the suffix \"y\" of norway. (+2)<br>\nTherefore, we had to use 4 suffixes to reproduce the string \"nowayyy\" (\"no\", \"way\", \"y\", \"y\"), the output must be 4.<br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 < length of <code>l</code> < 100<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "lua",
    "example": null,
    "more_info": null
  },
  {
    "id": 35,
    "title": "Vowel Sorting",
    "date_enable": "2023-02-26 20:00:00",
    "date_end": "2023-03-05 20:00:00",
    "update_state": 1,
    "descript": "You will be given many lines as input.<br>\nThe goal of this problem is to sort the list in ascending order based on the number of vowels in each string. If two strings have the same number of vowels, they should be sorted in alphabetical order.<br>\nFor this problem, we assume that the vowels are the letters 'a', 'e', 'i', 'o', and 'u'.<br>\n\n<br><b><u>Example:</u></b><br>\n<code>\nhello<br>world<br>python<br>algorithm<br>programming</code><br>\nThe list is: <code>[\"hello\", \"world\", \"python\", \"algorithm\", \"programming\"]</code>.\nThe sorted list would be <code>[\"python\", \"world\", \"hello\", \"algorithm\", \"programming\"]</code>, python (1), world (1), hello (2), algorithm (3), programming (3). P is before W, so python is before world. A is before P  so algorithm is better than programming<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ len(strings) ≤ 1000<br>\n1 ≤ len(strings[i]) ≤ 100<br>\nThe same word will not be used twice or more<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "php",
    "example": null,
    "more_info": null
  },
  {
    "id": 36,
    "title": "Playlist 🎶",
    "date_enable": "2023-03-05 20:00:00",
    "date_end": "2023-03-12 20:00:00",
    "update_state": 1,
    "descript": "You will be given many lines as input.<br>\nThe goal of this problem is going to be, given a given time <code>t</code>, as well as a given playlist with the duration and title of each track in the playlist, to find what title the playlist is at after waiting <code>t</code>.<br>\nThe first line is a string that represent a <code>t</code>, the other lines correspond to the tracks in the playlist.<br>\nThe format of <code>t</code> may change depending on its value: If t is less than an hour, the format is MM:SS (or M:SS), otherwise it is HH:MM:SS (or H:MM:SS)<br>\n\n\n<br><b><u>Example:</u></b><br>\n<code>\n1:30<br>1:23 First<br>0:15 Second<br>1:00 Third</code><br>\n<code>t</code> is 1 minute and 30 seconds and the playlist is composed of 3 titles:\n<ul>\n    <li>\n        \"First\", with a duration of 1 minute and 23 seconds.\n    </li>\n    <li>\n        \"Second\", with a duration of 15 seconds.\n    </li>\n    <li>\n        \"Third\", with a duration of 1 minute and 0 seconds.\n    </li>\n</ul>\nWe can see that, the duration of <code>t</code> is higher than the one of \"First\". So the current track isn't \"First\".\nAfter \"First\", there is only 7 seconds remaining (1m30s - 1m23s = 7s), and the duration of \"Second\" being greater than 7s (it's 15s), the current track is \"Second\". <br>So, in this case, the duration of \"Third\" does not matter to us and the output should be <code>Second</code>.<br><br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\nThe title of a music never starts or ends with a space<br>\nThere will never be several spaces in a row in the name of a track<br>\n0:01 ≤ track duration ≤ 59:59<br>\n3 ≤ tracks ≤ 100<br>\n0:03 ≤ playlist duration < 10:00:00<br>\nt < duration of the playlist<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 1,
    "voters": 1,
    "lotw": "OCaml",
    "example": null,
    "more_info": null
  },
  {
    "id": 37,
    "title": "Diamond Word",
    "date_enable": "2023-03-12 20:00:00",
    "date_end": "2023-03-19 20:00:00",
    "update_state": 1,
    "descript": "You will be given a string as input<br>\nThe goal of this problem is to create a \"diamond\" with the string given.<br>\nAt the top of the diamond, (on the first line), there is only the first letter of the string, centered, and each following line, the following letter is added.<br>\nWhen the whole word is written, then the opposite will happen, and each line that passes will have the last letter of the word removed.<br>\nFor readability, and to easily center the letters, each letter will be separated by a space.<br>\n\n\n<br><b><u>Example:</u></b><br>\n<code>\nCODE</code><br>\nThe output should be:<br>\n<code>\n   C<br>\n  C O<br>\n C O D<br>\nC O D E<br>\n C O D<br>\n  C O<br>\n   C<br>\n</code>\nOn the first line, before \"C\", there is 3 spaces.<br>\nOn the second line, before \"C\", there is 2 spaces.<br>\nEtc.<br>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n1 ≤ length of string ≤ 10\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 9,
    "voters": 1,
    "lotw": "Prolog",
    "example": null,
    "more_info": null
  },
  {
    "id": 38,
    "title": "Symmetrial Garden",
    "date_enable": "2023-03-19 20:00:00",
    "date_end": "2023-03-26 20:00:00",
    "update_state": 1,
    "descript": "You will be given many lines as input<br>\nThe first line, will be an integer n, which will represent the number of remaining lines in input.<br>\nEach following line will be composed of an even number of characters and will be composed of # and spaces.<br>\nMany castles belonging to kings had gardens (for example, the Palace of Versailles). Many of these gardens have a symmetrical dimension.<br>\nThe lines will therefore correspond to a garden, and the goal of this problem will be to evaluate whether the garden is symmetrical or not.<br>\nThe symmetry studied will be vertical.<br>\nTo determine the symmetry of a line, for example, compare the first half of the line to the second half of the string but reversed.<br>\nThe output should be the total percentage of symmetry, but floored.<br>\n\n<br><b><u>Example:</u></b><br>\n<code>4<br>\n### <br>\n# ##<br>\n#  #<br>\n####</code><br>\nFirst, we know that there are going to 4 lines.<br>\nFirst line (\"### \"): The first half of the string is \"##\" and the second reversed is \" #\".<br>\nTherefore, we see that it's symmetrical at 50%. ('#' != ' ', and '#' == '#')<br>\nSecond line (\"# ##\"): The first half of the string is \"# \" and the second reversed is \"##\".<br>\nTherefore, we see that it's symmetrical at 50% too. ('#' == '#', and ' ' != '#')<br>\nThird line (\"#  #\"): The first half of the string is \"# \" and the second reversed is \"# \".<br>\nWe can see that they are identical, so it's 100% symmetrical!<br>\nLast line (\"####\"): The first half of the string is \"##\" and the second reversed is \"##\".<br>\nWe can see that they are identical, so it's 100% symmetrical!<br>\nTo see the symmetry of this garden, we need to average the symmetry of each line. (50% + 50% + 100% + 100%)<br>\nSo the output should be 75%.<br>\n\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n4 ≤ n ≤ 64<br>\n4 ≤ width of garden ≤ 32<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "R",
    "example": null,
    "more_info": null
  },
  {
    "id": 39,
    "title": "Hangman",
    "date_enable": "2023-03-26 20:00:00",
    "date_end": "2023-04-02 20:00:00",
    "update_state": 1,
    "descript": "You will be given many lines as input<br>\nHangman is a game where the player has to guess a word by proposing letters. If the letter is in the word, the position of the letter(s) is revealed. Otherwise, the player loses a turn.<br/>\nAt the beginning, the player has the right to make 7 mistakes to find the word. The goal of this problem is to find out who has the best score in Hangman.<br/>\nEach line will have 2 spaces in it. The first part of the string will be the person's name, the second part the word that the person has to find, and the third part corresponds to the letters that the person has tried.<br/>\nYou must therefore find which players have successfully found their word with the fewest mistakes.<br/>\nIf several players have the same score, then you must output their names on different lines in the order of appearance.<br/>\n\n\n\n<br><b><u>Example:</u></b><br>\n<code>Alex SUDOKU AEIOUMNLSB<br>\nJeanne KIWI AEIWK<br>\nAlbert DATE AIEOUTD</code><br>\nFirstly, the name of the player is Alex, the word they need to guess is SUDOKU, and they have tried the letters AEIOUMNLSB. As we can see, there are 7 letters (A, E, I, M, N, L, B) that Alex tried but that weren't in the word. That is why Alex lost after 7 tries. So, the score of Alex is -7.<br/>\nSecondly, the name of the player is Jeanne, the word they need to guess is KIWI, and they have tried the letters AEIWK. As we can see, there are only 2 letters (A, E) that Jeanne tried but that weren't in the word. So, for now, they have the best score with only -2.<br/>\nLastly, the name of the player is Albert, the word they need to guess is DATE, and they have tried the letters AIEOUTD. As we can see, there are 3 letters (A, I, E) that Albert tried but that weren't in the word. So, the score of Albert is -3.<br/>\nJeanne made the fewest mistakes, so they win, and the output should be \"Jeanne\".<br/>\n\n\n<div style=\"font-weight: 900; cursor: pointer; margin-bottom: -35px;\" onclick=\"moreInfo()\">More info</div>\n<div id=\"more_info\" style=\"display: block; margin-bottom: -30px; margin-top: 35px\" value=\"1\">\n2 ≤ players ≤ 10<br>\n5 ≤ length of word ≤ 45<br>\n</div>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "Elixir",
    "example": null,
    "more_info": null
  },
  {
    "id": 40,
    "title": "Fibonacci & Binary 2",
    "date_enable": "2023-04-06 20:00:00",
    "date_end": "2023-04-16 20:00:00",
    "update_state": 1,
    "descript": "You will be given an uppercase string as input<br/>\nFirst, you will need to get the position of every letter in the alphabet (a => 1, b => 2, ...) and do the sum of the string.<br/>\nAfter calculating the sum, we will convert it to binary. Then, for each 1 in the binary expression, we need to calculate the sum by adding the corresponding Fibonacci number (using the first two terms a=1 and b=1) for that index.<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\n\nThe letters 'N', 'E', and 'W' are located at indices 14, 5, and 23, respectively.<br/>\nThe sum of these indices is 42. The binary expression of 42 is 101010. Finally, we need to calculate the sum of the Fibonacci numbers at indices 2, 4, and 6 from the right \n\nBinary ex: 1 0 1 0 1 0 <br/>\nFibonacci: 8 5 3 2 1 1 <br/>\n\n(since these are the positions of the 1s in the binary expression of 42).<br/>\nThat is, we need to calculate fib(2) + fib(4) + fib(6), which equals 1 + 3 + 8 = 12.<br/>\n\n\nMore info</div>\n\n1 <= length string < 100",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 58,
    "voters": 6,
    "lotw": null,
    "example": null,
    "more_info": null
  },
  {
    "id": 41,
    "title": "Harshad daisies",
    "date_enable": "2023-04-16 20:00:00",
    "date_end": "2023-04-23 20:00:00",
    "update_state": 1,
    "descript": "You will be given many integers on different lines as input<br>\nIn this problem, you have daisies, and each input number corresponds to the number of petals on one of your daisies. However, you also love mathematics, and particularly Harshad numbers.<br/>\nA Harshad number is a number that is divisible by the sum of its digits.<br/><br/>\n\nExample:<br/>\n198 => 198 % (1+9+8) = 198 % 18 == 0. So, 198 is Harshad.<br/>\n199 => 199 % (1+9+9) = 199 % 19 != 0. So, 199 is not Harshad.<br/><br/>\n\nYou would like to alternate your daisies between those that have a number of petals that is a Harshad number and those that are not.<br/>The goal of this problem is to determine if it is possible to alternate the daisies based on their number of petals.<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\nYour daisies have 94, 11, 108, 198, and 199 petals.<br/>\nWe will determine which daisies have a number of petals that is a Harshad number:<br/>\n- 94: 94%(9 + 4) = 94%13 == 3, so 94 is not a Harshad number.<br/>\n- 11: 11%(1 + 1) = 11%2 == 1, so 11 is not a Harshad number.<br/>\n- 108: 108%(1 + 0 + 8) = 108%9 == 0, so 108 is a Harshad number.<br/>\n- 198 is a Harshad number.<br/>\n- 199 is not a Harshad number.<br/><br/>\n\nWe have 2 Harshad numbers, and 3 numbers that aren't Harshad numbers.<br/>\nIt is therefore possible to alternate the daisies that are harshad, and those that are not, with (94, 108, 11, 198, 199) for example.<br/>\nSo, the output should be 1.<br/>\nIf there was only 1 Harshad number or if there were 5 Harshad numbers, it would not be possible to alternate the daisies that are Harshad and those that are not. Therefore, the output should be 0 in both cases.<br/>\n\n\n\nMore info</div>\n\n1 < daisies < 100<br/>\n0 < petals < 2048<br/>",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 49,
    "voters": 6,
    "lotw": "F#",
    "example": null,
    "more_info": null
  },
  {
    "id": 42,
    "title": "Political evolution",
    "date_enable": "2023-04-23 20:00:00",
    "date_end": "2023-04-30 20:00:00",
    "update_state": 1,
    "descript": "You will receive several integers on different lines as input.<br/>\nThis problem is about the evolution of citizen's appreciation of a Head of State.<br/>\nEach number corresponds to a weekly survey on the Head of State and represents the satisfaction rate that citizens have towards their Head of State.<br/>\nThe goal is to determine the longest period, in weeks, during which the Head of State was appreciated by 50% or more of the population.<br/>\nHowever, if during the last 4 weeks, the Head of State had a satisfaction rate below 15%, then this means that a revolution has occurred.<br/>\nIn this case, the output should be -1.<br/>\n\n<br><b><u>Example:</u></b><br>\n\nHere is the list of appreciations: [75, 67, 54, 46, 51, 52, 55, 53, 50, 34, 22].<br/>\nWe can see that at the start, there are 3 weeks where the Head of State was above 50 (75, 67, 54).<br/>\nBut after that, he/she goes under 50 (46).<br/>\nSo, The streak is over.<br/>\nAfter that, the Head of State goes above 50 again, and stay above 50 during 5 weeks (51, 52, 55, 53, 50).<br/>\nSince, after that he/she goes under 50 again, the output should be 5.<br/>\nSince the Head of State has never been below 15% for 4 consecutive weeks, then a revolution has not occurred.<br/>\n\nMore info</div>\n\n4 ≤ weeks < 1000",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 34,
    "voters": 4,
    "lotw": "jelly",
    "example": null,
    "more_info": null
  },
  {
    "id": 43,
    "title": "Paired Parenthesis",
    "date_enable": "2023-04-30 20:00:00",
    "date_end": "2023-05-07 20:00:00",
    "update_state": 1,
    "descript": "You'll be given a string as input<br/>\n\nThis string will contain ASCII characters, including parentheses, braces, and brackets. The goal is to determine if the parentheses are balanced.\n\nRules to follow:\n\n- A closing parenthesis without an opening parenthesis is considered invalid, e.g., \")}] is invalid\".\n- An opening parenthesis without a closing parenthesis is considered invalid, e.g., \"({{ is invalid\"\n\n\n<br><b><u>Example:</u></b><br>\n\n\n\nThe input is \"(([{abc}ok])([in between)])\".\nWe are only interested in the parentheses, so we have \"(([{}])([)])\".\nWe can see that at the beginning, a parenthesis is opened, and that subsequently, there is a string of parentheses: ([{}]). No problem with that, it's valid.\nHowever, there is a problem with ([)] because the bracket does not close inside the parenthesis.\nThe output should be \"unpair\". If it had been valid, it would have been \"pair\".\n\n\nMore info</div>\n\n0 < length < 100\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 15,
    "voters": 2,
    "lotw": "Powershell",
    "example": null,
    "more_info": null
  },
  {
    "id": 44,
    "title": "Triforce",
    "date_enable": "2023-05-07 20:00:00",
    "date_end": "2023-05-14 20:00:00",
    "update_state": 1,
    "descript": "Zelda is a beloved video game franchise developed by Nintendo, featuring the adventures of a hero named Link as he battles evil forces to save the kingdom of Hyrule.\nThe beauty of Zelda lies in its immersive world, compelling characters, and intricate storyline that has captivated players for decades.\nOne of the main symbol in Zelda is the triforce, which consist in 3 triangles.\nTherefore, you'll be given an integer, n, as input.\nYou'll need to print a triforce with each triangle being of length n with '#'.\n\n\n<br><b><u>Example:</u></b><br>\n\n\nAs the input is 3, the height of the triangles should be of 3.\n#\n###\n#####\nIt's why we got this output.\n\n\nMore info</div>\n\n0 < n < 100\nTrailing whitespaces are allowed\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 30,
    "voters": 4,
    "lotw": "c++",
    "example": null,
    "more_info": null
  },
  {
    "id": 45,
    "title": "Vim Keybinds",
    "date_enable": "2023-05-14 20:00:00",
    "date_end": "2023-05-21 20:00:00",
    "update_state": 1,
    "descript": "Vim is a highly configurable text editor that is often used by programmers due to its efficiency and versatility.<br/>\nVim keybinds are a set of keyboard shortcuts used to navigate and manipulate text within the editor, allowing users to perform complex editing tasks quickly and easily.<br/>\nIn this problem, you will have to simulate basic Vim actions on a text.<br/>\nTo keep the problem short, we will only look at the j, k, d, y, p commands.<br/>\n\n\nHere's how each command works:<br/>\n- j, moves down one line<br/>\n- k, moves up one line<br/>\n- dd, deletes the current line and copies it<br/>\n- yy, copies the line<br/>\n- p, pastes the copied line and moves down one line\n\nIt is also possible to use numbers in front of the instructions to execute an instruction a certain number of times.<br/>\n(e.g. 3j moves down 3 lines. 3dd deletes 3 lines.)<br/>\n\nThe first line will be the instructions to perform on the text.<br/>\nThe rest is the text itself.\n\nFor Vim users:<br/>\n- We assume that we are always in normal mode.<br/>\n- We will only handle dd and yy. No dj or dk for example.<br/>\n- We assume that p moves down one line, so 3p will move down the cursor by 3 lines (instead of 1).\n\n<br><b><u>Example:</u></b><br>\n\nThe actions are \"2ddjjkjyy11p\" and the text is  \"Welcome<br/>\nTo<br/>\nWeekGolf<br/>\"\nWe can see the actions as: [\"2dd\", \"j\", \"j\", \"k, \"j\", \"yy\", \"11p\"]<br/>\nThe cursor starts at the first line.\nSo we first remove the 2 first line.\nIt only remains \"WeekGolf\".\nAfter that, the user try to go down (j) and up (k), but it doesnt change anything since there is only one line.\nAfter that, we copy the line (\"WeekGolf\"), and we copy it 11 times (11p).\n\n\n\nMore info</div>\n\nThe cursor start at the first line.\n0 < length_line < 100\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 9,
    "voters": 2,
    "lotw": "lua",
    "example": null,
    "more_info": null
  },
  {
    "id": 46,
    "title": "Nokia numpad",
    "date_enable": "2023-05-21 20:00:00",
    "date_end": "2023-05-28 20:00:00",
    "update_state": 1,
    "descript": "Nokia phones are old mobile phones.<br/>\nBack then, phones were not touchscreen, and to write messages, numeric keypads were used. The numeric keypad consists of numbers from 0 to 9.<br/>\nEach number is assigned a certain number of letters to choose from.<br/>\nWhen you press the same digit multiple times, it cycles to the next letter on the keypad.<br/>\nHowever, to write multiple letters from the same block, you simply pause and don't press anything.<br/>\nIn this problem, pauses are symbolized by dots.<br/>\nHere is the mapping of numbers to letters:\n\n0 => Space<br/>\n2 => ABC<br/>\n3 => DEF<br/>\n4 => GHI<br/>\n5 => JKL<br/>\n6 => MNO<br/>\n7 => PQRS<br/>\n8 => TUV<br/>\n9 => WXYZ\n\n\n<br><b><u>Example:</u></b><br>\n\nThe input is \"2222.2033.4\"<br/>\nFirst we can see that the user clicked 4 times on 2 without stop.<br/>\nA => B => C => A, so the first char is A.<br/>\nAfter that, the user click on 2, than 0, so \"A \".<br/>\nAfter that the user clicked 2 times on 3, so it's D => E.<br/>\nFinally, the user wait and click on 4 (G).<br/>\nSo the output is \"AA EG\"\n\n\n\nMore info</div>\n\nWhen you click more times on a number than the number of characters it represents, it wraps back to the beginning.\n\nAll letters are in uppercase.\n\nThe digits are just going to be 023456789.\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 25,
    "voters": 3,
    "lotw": "rust",
    "example": null,
    "more_info": null
  },
  {
    "id": 47,
    "title": "Character Mapping",
    "date_enable": "2023-05-28 20:00:00",
    "date_end": "2023-06-04 20:00:00",
    "update_state": 1,
    "descript": "You'll be given two strings as input<br/>\nBoth line are a string composed of lower-case letters: source and target.<br/>\nYour task is to determine whether it is possible to map each character in source to a unique character in target.<br/>\nIn other words, you need to find a one-to-one mapping between characters of source and target such that each character in source is mapped to a character in target, and no two characters in source are mapped to the same character in target.<br/>\nThe output should be 1, if it can be valid, or 0 if not.<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\n\nTherefore, the source is \"ababc\", and the target is \"xyyyx\"<br/>\nThere are two reasons that makes it invalid.<br/>\nFirst, \"a\"s are mapped to different letters a=>x (on char 0), a=>y (on char 2).<br/>\nSecond, two letters are mapped to the same letter. a=>x (on char 0) c=>x (on char 4).<br/>\nThe output is, therefore, 0.<br/>\nA valid target would have been \"xyxyz\" for example.<br/>\n\n\nMore info</div>\n\n0 < length of string < 100\n",
    "show_case": 9,
    "random_case": 6,
    "sum_votes": 9,
    "voters": 1,
    "lotw": "go",
    "example": null,
    "more_info": null
  },
  {
    "id": 48,
    "title": "Staircase Sum",
    "date_enable": "2023-06-04 20:00:00",
    "date_end": "2023-06-11 20:00:00",
    "update_state": 1,
    "descript": "You are given two positive integer a and z on different lines.<br/>\nYour task is to calculate the sum of all possible numbers that can be formed by concatenating consecutive numbers from a to z in a staircase pattern.<br/>\nThe staircase pattern starts with the number a, followed by the numbers ab, abc, abcd, and so on, up to z.<br/>\nBut if a number is >= 10, it should be %10<br/>\nExample: a=1, z=4. The pattern is 1, 12, 123, 1234.<br/>\nYour goal is to write a program that takes the inputs a and b and returns the sum of the numbers in the staircase pattern.\n\n\n\n\n<br><b><u>Example:</u></b><br>\n\nWe can see that <code>a = 9</code> and <code>b = 13</code><br/>\nTherefore, we have to sum:<br/>\n- 9<br/>\n- 9(10%10) = 90<br/>\n- 9(10%10)(11%10)9 = 901<br/>\n- 9012<br/>\n- 90123<br/>\nThe sum of theses 5 numbers is 100135, therefore, it should be the output\n\n\n\nMore info</div>\n\na < z\n16 > z - a >= 0\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 20,
    "voters": 2,
    "lotw": "clojure",
    "example": null,
    "more_info": null
  },
  {
    "id": 49,
    "title": "File Tree",
    "date_enable": "2023-06-11 20:00:00",
    "date_end": "2023-06-18 20:00:00",
    "update_state": 1,
    "descript": "You'll be given many lines as input.<br/>\n\nYou will need to reconstruct the structure of a system using the \"ls\" and \"cd\" commands.<br/>\nThe commands will be identifiable by a line starting with \"$\".<br/>\nThere will be three distinct types of commands:<br/>\n\n- \"ls -1F\": which will display the list of directories and files on separate lines.<br/>\n- \"cd directory\": which changes to the specified directory and enters it.<br/>\n- \"cd ..\": which goes to the previous directory.<br/>\n\nBy default, you start at the root (/).<br/>\nDirectories end with a /.<br/>\nSymbolic links end with @, but we won't be dealing with them in this case.<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\nFirst, we are in \"/\", and we get all the files.<br/>\nAfter that we go in b and we list all the files.<br/>\nAfter that, we go back, and go in c and list all the files.<br/>\nWhen we dont go in a directory, we just print the name of it, without any content as if it was empty.<br/>\n\nMore info</div>\n\nFiles are following that syntax:\n[A-Za-z0-9+]+?.[a-z]*?[/|@]\n\nWe never cd in a directory that we didnt list before.\n",
    "show_case": 6,
    "random_case": 0,
    "sum_votes": 2,
    "voters": 1,
    "lotw": "kotlin",
    "example": null,
    "more_info": null
  },
  {
    "id": 50,
    "title": "Word in Word",
    "date_enable": "2023-06-18 20:00:00",
    "date_end": "2023-06-25 20:00:00",
    "update_state": 1,
    "descript": "You'll be given two lines as input.<br/>\nThe goal of this problem is to count in how many ways you can make the first string by removing letters from the second string.<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\nThe first string is \"rat\", the second is \"rattiat\".<br/>\nYou can form the word rat by removing letters in many different ways:<br/>\n\"rattiat\" => \"rat____\" => \"rat\"<br/>\n\"rattiat\" => \"ra_t___\" => \"rat\"<br/>\n\"rattiat\" => \"ra____t\" => \"rat\"<br/>\n\"rattiat\" => \"r____at\" => \"rat\"<br/>\nSo, there are only 4 ways to create \"rat\" from \"rattiat\", by only removing letters, so 4 should be the output.<br/>\n\n\nMore info</div>\n\n0 < length_first_string < length_second_string < 100\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "raku",
    "example": null,
    "more_info": null
  },
  {
    "id": 51,
    "title": "Happy Birthday!",
    "date_enable": "2023-06-25 20:00:00",
    "date_end": "2023-07-02 20:00:00",
    "update_state": 1,
    "descript": "WeekGolf will be 1 year old the 1 July of 2023!<br/>\nTo celebrate this anniversary, the problem will be themed around birthdays!<br/>\nYou will receive a string composed of letters and numbers.<br/>\nLet's say someone's age can be calculated from their username by multiplying the index of each letter in the word \"birthday\" by the corresponding letter count in the username.<br/>\nNext, you need to display a cake with a number of candles equivalent to the person's age.<br/>\nEach candle will be represented by an asterisk (*) and a vertical line (|) below it.<br/>\nEach candle should be separated by a space.<br/>\nBelow the candles, there should be a cake. The cake will have a height of 3 characters, and its length will be proportional to the person's age.<br/>\nThe sides of the cake will be represented by \"#\" symbols, and the center will be filled with spaces.\n\n\n\n<br><b><u>Example:</u></b><br>\n\nThe input is \"Steffan\".<br/>\nThere are 2 letters that are in \"birthday\" and in \"Steffan\": \"t\", \"a\".<br/>\nThe index of \"a\" in birthday is 6 and the index of \"a\" in \"Steffan\" is 5.<br/>\nThe index of \"t\" in birthday is 3 and the index of \"t\" in \"Steffan\" is 1.<br/>\nSo Steffan is 5 * 6 + 3 * 1 = 30 + 3 = 33 years old.<br/>\nTherefore, the number of candles should be of 33.\n\n\n\nMore info</div>\n\n0 < length string <= 64<br/>\n0 <= age < 2 ** 12<br/>\nIf the age of the user is of 3, there shouldnt be any output (no cake, no candle).<br/>\nAlmost all the input are names of user in WeekGolf.",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 8,
    "voters": 1,
    "lotw": "ruby",
    "example": null,
    "more_info": null
  },
  {
    "id": 52,
    "title": "Unique Pair Product",
    "date_enable": "2023-07-02 20:00:00",
    "date_end": "2023-07-09 20:00:00",
    "update_state": 1,
    "descript": "You'll be given many integers on different lines.<br/>\nYour task is to find the sum of the products of all unique pairs of numbers in the list.<br/>\nAll the pairs need to have unique numbers ( 1,1 is not valid )<br/>\n\n<br><b><u>Example:</u></b><br>\n\nThe values are 5, 6, 1, 6<br/>\nAll the pairs possible are:<br/>\n- 5,6<br/>\n- 1,6<br/>\n- 5,1<br/>\nEven tho 6 is here two times, the pairs need to be unique. So it doesn't  matter.<br/>\n(6,5), (6,1) and (1,5) are considered as duplicates of (5,6), (1,6) and (5,1), therefore, they don't count.\nThe product of 5*6 == 30. The product of 1*6 == 6. The product of 1*5 == 5.<br/>\nTherefore, the sum and the output are 30 + 6 + 5 = 41.<br/>\n\nMore info</div>\n\n-2**15 < sum < 2**15\n2 <= lines < 100\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "julia",
    "example": null,
    "more_info": null
  },
  {
    "id": 53,
    "title": "Numeric Maze",
    "date_enable": "2023-07-09 20:00:00",
    "date_end": "2023-07-16 20:00:00",
    "update_state": 1,
    "descript": "You'll be given one integer, n, as input<br/>\nYour task is to find the shortest path from 1 to n, following a set of specific rules.<br/>\nThe rules are simple: You can only multiple by 2 or substract by 1.<br/>\n\n<br><b><u>Example:</u></b><br>\n\nn is 10, therefore we need to find the smallest path to go from 1 to 10 by * 2 or -1  <br/>\nIn this case, the answer is:\n1 =(*2)=> 2 =(*2)=> 4 =(-1)=> 3 =(*2)=> 6 =(-1)=> 5 =(*2)=> 10.  \nTherefore, the output should be 6\n\nMore info</div>\n\n1 <= n <= 1024<br/>\n0 <= step <= 19 \n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 20,
    "voters": 2,
    "lotw": "julia",
    "example": null,
    "more_info": null
  },
  {
    "id": 54,
    "title": "National Assembly",
    "date_enable": "2023-07-16 20:00:00",
    "date_end": "2023-07-23 20:00:00",
    "update_state": 1,
    "descript": "One common structure in several countries is to have a national assembly consisting of multiple individuals and political parties to vote on legislation. There are various ways to elect these individuals, and one of the most well-known methods is the single-member majoritarian system.<br/>\nThe term might sound complicated, but it simply means that a person is elected when they obtain a majority of votes in their constituency, and there are as many constituencies as there are seats in the assembly. In national assemblies with more than two parties, there can be two types of majorities:<br/>\n- Absolute Majority: When a party has more than half of the seats in the assembly.<br/>\n- Relative Majority: When a party has the highest number of seats in the assembly but does not have more than half of the seats.<br/>\nA relative majority does not guarantee the majority party the ability to govern as it wishes, and it can create unstable situations in a country.<br/>\nYou will now receive one party name per line.<br/>\nThe goal is to determine which party has the majority in the assembly and whether it has a relative or absolute majority.<br/>\n\n\n\n<br><b><u>Example:</u></b><br>\n\nIn the input, we can see that there are 5 people at the left, 3 people at the right, 3 people at the center.\nThe total of people is therefore 5 + 3 + 3 = 11.\nAs there are no parties with 6 or more votes, no party has an absolute majority.\nTherefore, its the \"left\" that has a relative majority.\nSo the output should be \"left relative\"\n\nMore info</div>\n\nThere will never be equality between the parties.<br/>\n3 <= seats <= 2977<br/>\n1 <= parties < 32\n\n",
    "show_case": 10,
    "random_case": 6,
    "sum_votes": 17,
    "voters": 2,
    "lotw": "nim",
    "example": null,
    "more_info": null
  },
  {
    "id": 55,
    "title": "Luminespire Simulator",
    "date_enable": "2023-07-23 20:00:00",
    "date_end": "2023-07-30 20:00:00",
    "update_state": 1,
    "descript": "If you've ever answered a problem on the code golf stack exchange, you'll know that writing an explanation can be quite consuming and prone to formatting mistakes. Indeed, I myself have added one too many spaces to a line, or not enough spaces. And don't even get me started on trying to deal with unicode characters that aren't single-width. \n\nYour task today is to write an explanation template that generates a correctly spaced explanation template, so that only the descriptions need to be written manually.\n\nYou will be given a program to explain. You will also be given a series of lines, each consisting of comma-separated integers, representing the 0-based indices of characters on each line.  Your program will then output a template consisting of:\n\n```\nprogram\ncharacters in line 1  #\ncharacters in line 2  #\n...\ncharacters in line n  #\n```\n\n(This challenge inspired by Luminespire - https://github.com/Vyxal/Luminespire)\n\nWhere `characters in line n` is replaced with the corresponding character(s) in the program. The line is padded with trailing spaces to be the length of the program, plus 2 spaces followed by a `#`. The `#` has no trailing spaces.",
    "show_case": 4,
    "random_case": 6,
    "sum_votes": 20,
    "voters": 2,
    "lotw": "vyxal",
    "example": "Given the input\n\n<code>\n∷[T›|½)↔1ḟ\n6, 7\n0\n1, 4\n2, 3\n5\n8, 9\n</code>\n\nthe output would be\n\n<code>\n∷[T›|½)↔1ḟ\n      )↔    #\n∷           #\n [  |       #\n  T›        #\n     ½      #\n        1ḟ  #\n</code>",
    "more_info": "1 < program length < 20\n1 < lines < 10\n1 < number of character indices < program length\n0 <= character index < program length\nThe program will not contain any newlines"
  },
  {
    "id": 56,
    "title": "The Onion Router",
    "date_enable": "2023-07-30 20:00:00",
    "date_end": "2023-08-06 20:00:00",
    "update_state": 1,
    "descript": "The Onion Router, better known as Tor, is a type of network that aims to provide everyone with the possibility of being anonymous. To achieve this, Tor routes requests through several nodes, often referred to as onion routers. Each node adds or removes a layer of encryption, hence the name \"onion,\" with the metaphor of an onion having multiple layers.<br/>\n\nThe purpose of this problem is to encrypt a message that will be passed through multiple nodes. Each node will increase or decrease the value of each character in the string.<br/>\n\nHere's how each relay adds encryption, with <code>n</code> being the offset it applies, and <code>i</code> being its index:<br/>\n\nFor each character with an <code>index % i < i - 1 </code>, the relay adds <code>n</code> to the character. If the character's value exceeds 127, it wraps around using <code>% 127</code>. Same for negative values.<br/>\n\n(We assume that for the first relay, each character is shifted by <code>n</code>.)<br/>\n\n\n<br><b><u>Example:</u></b><br>\n\n\n\nThere are 4 relays with values: 1 1 -1 2<br/>\nThe string is: abcdef<br/>\n\nThe first relay adds 1 to each character:<br/>\n<code>\nabcdef\n######\nbcdefg\n</code>\n\nThe second relay adds 1 to each character with an index % 2 < 1:<br/>\n<code>\nbcdefg\n# # # \ncceegg\n</code>\n\nThe third relay subtracts 1 from each character with an index % 3 < 2:<br/>\n<code>\ncceegg\n## ## \nbbedfg\n</code>\n\nFinally, the last relay adds 2 to each character with an index % 4 < 3:<br/>\n<code>\nbbedfg\n### ##\nddgdhi\n</code>\n\nThe output should be \"ddgdhi.\"\n\n\nMore info</div>\n\n-128 <= n <= 127<br/>\n0 <= relays <= 16 <br/>\n1 <= string_length < 100<br/>\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 8,
    "voters": 1,
    "lotw": "janet",
    "example": null,
    "more_info": null
  },
  {
    "id": 57,
    "title": "Prime Segment Times",
    "date_enable": "2023-08-06 20:00:00",
    "date_end": "2023-08-13 20:00:00",
    "update_state": 1,
    "descript": "A digital clock displays numbers using seven-segment displays. Given a start time and end time, count the number of times in this interval when the number of lit segments is prime. The start time is included in the count, but not the end. The clock is a 24-hour clock, and times will be given in an HH:MM format (or H:MM if the hour is less than 10), separated by a space. During the time period, the hour may wrap around from 23 to 0, but you can assume the total time interval is less than 24 hours.",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 30,
    "voters": 3,
    "lotw": "ocaml",
    "example": "The input is “6:58 7:02”.\nAt 6:58, 6+5+7 = 18 segments are lit. This is NOT prime.\nAt 6:59, 6+5+6 = 17 segments are lit. This IS prime.\nAt 7:00, 3+6+6 = 15 segments are lit. This is NOT prime.\nAt 7:01, 3+6+2 = 11 segments are lit. This IS prime.\nThe number of lit segments was prime 2 times, so the output should be “2”.",
    "more_info": "start_time != end_time\n6 and 9 are displayed with a tail and have 6 segments each.\n7 is displayed without a tail and has 3 segments.\nFor reference, all digits can be seen here: https://en.wikipedia.org/wiki/Seven-segment_display"
  },
  {
    "id": 58,
    "title": "Spades Tricks",
    "date_enable": "2023-08-13 20:00:00",
    "date_end": "2023-08-20 20:00:00",
    "update_state": 1,
    "descript": "Given a spades trick, return the zero-indexed index of the card that wins it.\n\nYou will be given many lines of cards. Each card is designated by two characters: its number and its suit.\nThe number can be from 2-9, J (10), Q (11), K (12), or A (ace, 13).\nThe suit will be S (spades), C (clubs), H (hearts), or D (diamonds).\nSo QC means a 12 of clubs.\n\nThe rules for who wins, in order of priority:\n- Spades are \"trump\". They rule over any other suit. If there are spades in the trick, then one of the spades will always win.\n- If there are no spades, or multiple spades, next, you go by number. The highest number wins. The suit does not matter out of clubs, hearts, and diamonds.\n- If there is still a tie, then whichever card is first in the trick wins.",
    "show_case": 14,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "scala",
    "example": "In this example, we have an 11 of clubs, 6 of hearts, 5 of spades, 8 of diamonds, and 2 of spades.\nFirst rule, we check for spades. There are two spades, so among these in the winner.\nNow the options are 5 of spades or 2 of spades.\nThe 5 of spades is higher, so it wins. The output is 2, because the 5 of spades was 3rd in the trick.",
    "more_info": "1 < cards < 61"
  },
  {
    "id": 59,
    "title": "Minesweeper",
    "date_enable": "2023-08-20 20:00:00",
    "date_end": "2023-08-27 20:00:00",
    "update_state": 1,
    "descript": "In the game minesweeper, the goal is to uncover the entire playing field without opening a single bomb.\nThis problem will simulate part of that game. Your input consists of a list of coordinates, and a field where the bombs are marked.\nThe goal is to reveal each of the given coordinates following the game's rules, and output the final board.\n\nThere are a few additional important rules:\n- A revealed square shows the count of bombs in its 8 adjacent squares\n- A square with no adjacent bombs shows a 0 when revealed\n- Unrevealed squares are displayed as a '.', bombs are displayed as a 'B'.\n- If a 0 gets revealed, this also reveals all of its 8 surrounding squares too.\n- If a bomb gets revealed, the game ends, meaning no further squares will be revealed",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 10,
    "voters": 1,
    "lotw": "lua",
    "example": "The first coordinate is 9,0, the top-right most square. This square does not have a bomb. If we look at all the adjacent squares, we can see none of them have a bomb either, so our tile reveals a 0.\nThis means all its adjacent squares are also revealed. The one to its left again has 0 adjacent bombs, so it continues to reveal its adjacent squares.\nThe other surrounding squares for these tiles are also revealed ([8,1] and [8,2] revealed by the original zero at [9,0], and [7,0] and [7,1] revealed by the second zero revealed at [8,0]).\nEach of these squares will show a 1 or a 2, because they do have adjacent bombs. The square at [7,1] has 2 adjacent bombs (to the left, and down to the right), so it will show a 2, the others are only adjacent to one bomb so they will show a 1.\nAfter this, the next coordinate needs to be revealed. This is 0,0, the top-left most square. This is again a zero, and quite a few squares around it are too.\nThis means it reveals a significant portion of the left side of the board, following the same pattern as previously explained.\nAfter this, the square at [6,1] is revealed. However, this square is a bomb. This means no additional squares are revealed, and the game ends.\nThis means the last coordinate, [9,9], is not revealed. The final board will be printed as the output.",
    "more_info": "boardsize = 10x10\n1 <= coordinate_count <= 10\n1 <= bomb_count <= 25\nCoordinates are in the format x,y"
  },
  {
    "id": 60,
    "title": "Number of Ghouls",
    "date_enable": "2023-08-27 20:00:00",
    "date_end": "2023-09-03 20:00:00",
    "update_state": 1,
    "descript": "Tokyo Ghoul is a series of action and fantasy books. In this book, there are two types of people, humans and ghouls.\n\nGhouls are classified according to their dangerousness in different categories:\nC,B,A and S.\n(There are also SS and SSS but to simplify the example, we will put SS and SSS in the \"S\" class)\n\nYour goal is to calculate the probability of running into a Ghoul of class N (if you run into one person) knowing how many Humans H and Ghouls there are of all classes C, B, A and S.\n\nThe first line will be the number of humans.\nThe second line will be the number of C/B/A/S ghouls.\nThe last line will be the class of the ghoul",
    "show_case": 1,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "ruby",
    "example": "Number of Humans H: 5\nNumber of Ghoul C,B,A,S: 5 3 2 0\nClass of Ghoul: C\nThere are 5+5+3+2=15 people.\nKnowing that there are 5 ghouls of class C in the sample, the probability of falling on a ghoul of class C is 5/15 = 33%.",
    "more_info": "0 <= humans < 1024\n0 < ghouls < 1024\nN can be 'C' or 'B' or 'A' or 'S'"
  },
  {
    "id": 61,
    "title": "Precise Compasses",
    "date_enable": "2023-09-03 20:00:00",
    "date_end": "2023-09-10 20:00:00",
    "update_state": 1,
    "descript": "Compasses usually show directions using the four cardinal directions: North, East, South and West, displayed as N, E, S and W respectively.\nFor an extra level of precision, halfway points are often included: NE, SE, SW and NW.\nIn this problem, we will take this to an extreme level:\nOur compass can have up to 8 letters combined, representing a very precise angle!\nThese angles could look something like: ENE\nThis would be between East and North-East, at a 67.5 degree angle.\n\nAssume that North is at 0 degrees, East is at 90 degrees, South is at 180 degrees and West is at 270 degrees.\nThe goal of this problem is to find the angle in degrees of a given compass direction.",
    "show_case": 9,
    "random_case": 6,
    "sum_votes": 11,
    "voters": 2,
    "lotw": "erlang",
    "example": "The input given is 5 characters long: NNENE\nThe E at the end and the N before it gives North-East, or 45 degrees.\nThe E before this means we are between East and North-East, so 67.5 degrees.\nThe N before this means we are more to the north (between North-North-East and East-North-East), so 56.25 degrees.\nFinally, the N at the start means we are even more north of this, giving a final angle of 50.625 degrees.",
    "more_info": "1 <= length <= 8\n0 <= result < 360"
  },
  {
    "id": 62,
    "title": "Bubble Sort",
    "date_enable": "2023-09-10 20:00:00",
    "date_end": "2023-09-17 20:00:00",
    "update_state": 1,
    "descript": "Bubble Sort is a simple sorting algorithm where the list is repeatedly traversed and adjacent elements are compared and swapped if they are out of order.\nIn this challenge, we will implement a variation of this algorithm: Instead of only putting adjacent elements in order, a group of several elements can be ordered at the same time!\n\nFor example, if we have the array [4,3,2,1,0] and k=2 (k representing the group size), the first iteration will swap the elements like the following:\n4,3 are compared and become 3,4\n4,2 are compared and become 2,4\n4,1 are compared and become 1,4\n4,0 are compared and become 0,4\nThis results in the array [3,2,1,0,4] after the first iteration.\nThe following iterations will continue this pattern and repeat until the array is sorted.\nThis example would take 4 iterations to sort the array.\n\nHowever, if k=3, several elements can be sorted at once:\n4,3,2 are compared and become 2,3,4\n3,4,1 are compared and become 1,3,4\n4,3,0 are compared and become 0,3,4\nresulting in the array [2,1,0,3,4] after the first iteration.\nThis pattern will continue the same way as the other example, but ordering more elements at once, only taking a total of 2 iterations to sort the array.\n\nThe goal of the challenge is to find the amount of necessary iterations to sort the array.\nAn iteration is counted as a whole loop through the array; not just a single comparison of two elements.",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "ocaml",
    "example": "EXPLANATION:\nIn the example, we have an array of 6 elements and a block size of 2.\nIn the first iteration, we sort the array like this:\n1,5 are compared and become 1,5\n5,8 are compared and become 5,8\n8,3 are compared and become 3,8\n8,2 are compared and become 2,8\n8,9 are compared and become 8,9\n\nThis results in the array [1,5,3,2,8,9] after the first iteration.\n\nWe continue by doing this same pattern again:\n1,5 are compared and become 1,5\n5,3 are compared and become 3,5\n5,2 are compared and become 2,5\n5,8 are compared and become 5,8\n8,9 are compared and become 8,9\n\nResulting in the array being [1,3,2,5,8,9].\n\nAnd since the array is still not sorted, we repeat it yet again:\n1,3 are compared and become 1,3\n3,2 are compared and become 2,3\n3,5 are compared and become 3,5\n5,8 are compared and become 5,8\n8,9 are compared and become 8,9\n\nAfter this iteration, the result is [1,2,3,5,8,9], which is sorted, thus the algorithm stops.\n\nSince there were 3 iterations, the number 3 will be printed as output.",
    "more_info": "3 <= array_length <= 100\n0 <= array_number <= 100\n2 <= k <= array_length"
  },
  {
    "id": 63,
    "title": "Pagination",
    "date_enable": "2023-09-17 20:00:00",
    "date_end": "2023-09-24 20:00:00",
    "update_state": 1,
    "descript": "You will receive 2 integer per input.\nThe first will be the page and the second will be the maximum number of pages.\nYou simply need to recreate a pagination system to navigate between pages.\nThe pagination system works as follows:\nIf the page you're currently on is not the first, you need to display \"<<\" and \"<\" at the beginning.\nIf the page you're currently on is not the last, you need to display \">\" and \">>\" at the end.\nOtherwise, just display the first 3 and last 3 numbers.\nIf there's more than one difference between 2 numbers next to each other, display \"...\" between them. (1 2 3 ... 8 9 10).\nYou should also display the selected page with \"[]\" like (<< < 1 2 3 .. [5] ... 7 8 9 > >>).\n\n\n<br><b><u>Example:</u></b><br>\n\n\nThe page is: 5, and the maximum number of page is 8.\nThe page isnt the first and last one, so we should add both << < and > >> at the end and start.\nSo, it should be:\n\"<< < 1 2 3 ... [5] 6 7 8 > >>\" (Because the difference between 5 and 6 is only 1).\n\n\nMore info</div>\n\n\n1 <= page <= maximum_page <= 1000\n",
    "show_case": 13,
    "random_case": 5,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "php",
    "example": null,
    "more_info": null
  },
  {
    "id": 64,
    "title": "Forgetting Curve",
    "date_enable": "2023-09-24 20:00:00",
    "date_end": "2023-10-01 20:00:00",
    "update_state": 1,
    "descript": "The forgetting curve is a theory created to describe how quickly someone forgets information or knowledge.\n\nYou'll be given two lines as input:\n\n1. The first line will consist of integers separated by spaces, representing the times when the person learned specific pieces of information.\n2. The second line will be an integer <code>n</code>, which is the time at which you want to know what percentage of the information the person remembers.\n\nThe equation you want to use is:\n\n<code> R = exp(-t / S) </code>\n\n- <code>R</code> represents how well the person remembers the information and is in [0; 1].\n- <code>t</code> is the time elapsed since the last time the person learned that particular information.\n- <code>S</code> is a measure of how well the information is anchored in memory.\n\n\n\nInitially, <code>S = 1</code>, <code>R = 1</code>, and <code>t = 0</code>. However, each time the person relearns something, <code>S</code> is incremented by <code>R</code>.\n\nTo calculate the output, you should compute <code>R</code> with <code>t</code> being the difference between the last element of the array (the most recent time the person learned something) and <code>n</code> (the time you want to know about).\n\n\n\n<br><b><u>Example:</u></b><br>\n\n\nThe person learned the knowledge 3 times: The first day, the second day and the forth day.<br/>\nAnd we want to know, at the fifth day, at which percentage, does the person remember ?\nFor the first day:\nR = exp( - (1 - 0) / 1) = exp(-1/1) = exp(-1) = 0.368. So, S += 0.368.\nFor the second day:\nR = exp( - (2 - 1) / 1.368 ) = 0.481. So, S = S + 0.481 = 1.849.\nFor the forth day:\nR = exp( - (4 - 2) / 1.849 ) = 0.339. So, S = S + 0.339 = 2.188.\nNow, we have S, we can now determine R for the fifth day:\nR = exp( - (5 - 4) / S) = exp(-1 / 2.188) = 0.6332.\nSo, the output should be 63.32%\n\n\nMore info</div>\n\n\nlast element arr < n<br/>\n1 <= times learn < 100<br/>\n0 < maximum_day < 2**15<br/>\nSource: <a href=\"https://en.wikipedia.org/wiki/Forgetting_curve\">https://en.wikipedia.org/wiki/Forgetting_curve</a>\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 9,
    "voters": 1,
    "lotw": "javascript",
    "example": null,
    "more_info": null
  },
  {
    "id": 65,
    "title": "AST",
    "date_enable": "2023-10-01 20:00:00",
    "date_end": "2023-10-08 20:00:00",
    "update_state": 1,
    "descript": "An Abstract Syntax Tree (AST) is a way to represent data in a programming language. It performs a hierarchy of actions based on the precedence and order of the expressions it encounters. The precedence of an expression determines the order in which operators are evaluated, giving higher priority to operators with higher precedence.\n\nFor example, in mathematics (and in most programming languages, except some array-oriented languages), 3 + 5 * 2 => 3 + (5 * 2). This is because the multiplication operator has higher precedence than addition.\n\nIn this exercise, there will be a single input line composed of integers, spaces, and +, -, %, *, /. The precedence of %, *, and / is the same and is higher than that of + and -.\n\nThe goal is to create a basic AST from binary operations. The output format will resemble YAML, with \"left:\", \"op:\", and \"right:\" fields.\n\nIn an AST, the statement at the top, is the one that should be evaluated at the end (the one with the least precedence)\n\n\n<br><b><u>Example:</u></b><br>\n\n\nFirst, since - is the rightmost operator with the least precedence, we will start with it.\n\n<code>\nleft: \"3 + 2 * 4 % 3 - 2\"\nop: -\nright: 2\n</code>\n\nThen, we repeat the same process for the left side:\n\n<code>\nleft:\n    left: 3\n    op: +\n    right: \"2 * 4 % 3\"\nop: -\nright: \"2\"\n</code>\n\nFinally, we repeat the same process on the left:right side, and we will have the result!\n\n\n\nMore info</div>\n\n1 < operators < 32\nThe expression is always valid\nOperators: [\"+\", \"-\", \"*\", \"/\", \"%\"]\n0 < int < 10**10\nSpaces can, or cannot be there\nThe indentation is just one space\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "perl",
    "example": null,
    "more_info": null
  },
  {
    "id": 66,
    "title": "Rubik's Cube",
    "date_enable": "2023-10-08 20:00:00",
    "date_end": "2023-10-15 20:00:00",
    "update_state": 1,
    "descript": "The rubik's cube is a 3-dimensional twisty puzzle with 6 sides, each with 9 squares, where you can turn each face to scramble / solve the puzzle.\nIn this problem, we will slightly simplify this puzzle by only considering the 27 individual cubes that make up the 3x3x3 puzzle. (In the real puzzle, orientation of the blocks matters since each side has a different color; in this problem we will ignore that and only the position of the blocks matters).\nThe cube will be represented by a 3x3x3 grid of 2-digit numbers, each number representing an unique block of the puzzle.\nThe goal of this puzzle is to apply a given sequence of moves to the cube, and print the resulting cube.\nEach move is a letter, representing a turn for one of the faces of the cube. A move can be followed by a single quote (') to indicate a counter-clockwise rotation of that face (otherwise, the rotation is clockwise).\na rotation means that the given face is rotated a full quarter turn. \"clockwise\" or \"counterclockwise\" is relative to the direction of that face when you would look directly at the given face (if you are looking from the front, a clockwise rotation of the back side would look like a counterclockwise rotation from your perspective).\nL represents turning the left face clockwise; L' represents turning the left face counterclockwise\nR is the right face\nU is the top face\nD is the bottom face\nF is the front face\nB is the back face\n\nIn the case of our number representation, the top face would be the first 3x3 plane of numbers; the bottom face would be the last 3x3 plane of numbers.\nThe left face would be made up of the first number of each row of each 3x3 plane, and the right face would be made up of the last number of each row of each 3x3 plane.\nThe front face would be the most bottom layer of each 3x3 plane, the back face would be the most top layer of each 3x3 plane.\n\nThis means that in the example:\nThe top face is represented by 10, 11, 12, 13, 14, 15, 16, 17, 18.\nThe bottom face is represented by 28, 29, 30, 31, 32, 33, 34, 35, 36.\nThe left face is represented by 10, 13, 16, 19, 22, 25, 28, 31, 34.\nThe right face is represented by 12, 15, 18, 21, 24, 27, 30, 33, 36.\nThe front face is represented by 16, 17, 18, 25, 26, 27, 34, 35, 36.\nThe back face is represented by 10, 11, 12, 19, 20, 21, 28, 29, 30.",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 20,
    "voters": 2,
    "lotw": "fs",
    "example": "The first move is U, which means we rotate the top face clockwise.\nThis means that the 10 moves to the spot of the 12, the 11 moves to the spot of the 15, the 12 moves to the spot of the 18, the 15 moves to the spot of the 17, the 18 moves to the spot of the 16, the 17 moves to the spot of the 13, the 16 moves to the spot of the 10, the 13 moves to the spot of the 11.\nThe centerpiece stays in the same place, since the face just rotates around it without affecting its position.\nThe second move is U, which means the top face will be rotated again, moving the blocks in the same pattern once more. \nThe top face should now look like:\n18 17 16 \n15 14 13 \n12 11 10\n\nThe next move is D, which means the bottom face should be rotated clockwise. This means the 30 goes to the position of the 28, 29 to 31, 28 to 34, 31 to 35, 34 to 36, 35 to 33, 36 to 30, and 33 goes to where 29 was.\nThe bottom face should now look like:\n30 33 36\n29 32 35\n28 31 34\n\nThe next move is R', meaning we rotate the right face counterclockwise.\nSince the top face and bottom face have already changed, the right face is currently made up of the blocks 16, 13, 10, 21, 24, 27, 28, 31, 34.\nThe 16 goes to the position of the 10, the 13 to the position of the 27, the 10 to 34, the 27 to 35, the 34 to 28, the 35 to 21, the 28 to 16, the 21 to 13 and the 28 to the position of the 16.\nThe entire cube would now look like:\n18 17 36\n15 14 21\n12 11 16\n\n19 20 35\n22 23 24\n25 26 13\n\n30 33 34\n29 32 27\n28 31 10\n\nFinally, the last move is F, meaning the front face will be rotated clockwise.\nThe front face is now made out of the blocks 12, 11, 16, 25, 26,13, 28, 31, 10.\nThe 12 goes to the position of the 16, the 11 to the position of the 13, 16 to 10, 13 to 31, 10 to 28, 31 to 25, 28 to 12, 25 to 11 and the 12 to the position of the 16.\nThe final cube after this rotation will be your output.",
    "more_info": "cube size: 3x3x3 (27 blocks)\n1 <= amount of moves <= 100\n10 <= number on cube <= 99"
  },
  {
    "id": 67,
    "title": "Maximum Power",
    "date_enable": "2023-10-15 20:00:00",
    "date_end": "2023-10-22 20:00:00",
    "update_state": 1,
    "descript": "You'll be given one integer as input.\nThe objective is simple, find the highest exponent such that a given integer can be expressed as the result of raising an integer to that power.\n\n<br><b><u>Example:</u></b><br>\n\nThe input is 8.\nYou can write 8 as 2**3. And 3 is the maximum possible, so it should be the output.\n\nMore info</div>\n\n1 < n <= 256\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "prolog",
    "example": null,
    "more_info": null
  },
  {
    "id": 68,
    "title": "Joystick",
    "date_enable": "2023-10-22 20:00:00",
    "date_end": "2023-10-29 20:00:00",
    "update_state": 1,
    "descript": "In old arcade games, you could often fill in 3-letter initials after reaching the highscore. This problem will be about this system, except there can be up to 128 letters instead of just 3.\nThe first input will be the string currently displayed, and the second input will be the string you want to change it to.\nYou can change each letter with a move down or a move up.\nA move down increments the letter (A->B, O->P, Z->A)\nA move up decrements the letter (Z->Y, T->S, A->Z)\nThe goal is to find the neccessary amount of joystick moves to get the desired string.",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "bash",
    "example": "The current string is HELLO, which we want to change to WORLD.\nThe first letter H needs to be changed into a W.\nIt takes 15 moves to go from H to W if we go down (H->I->J->(...)->U->V->W). But if we go up and loop around, it only takes 11 (H->G->F->(...)->A->Z->Y->X->W)\nGoing from E to O takes 10 moves (E->F->G->H->I->J->K->L->M->N->O)\nGoing from L to D takes 6 moves\nGoing from L to L takes 0 moves, since it already is the correct letter\nGoing from O to D takes 11 moves\n\nSo in total, we need to move the joystick 11 + 10 + 6 + 0 + 11 = 38 times to get our desired string displayed.",
    "more_info": "1 <= length <= 128\nOnly capital letters are used (A-Z)"
  },
  {
    "id": 69,
    "title": "Ghost talk",
    "date_enable": "2023-10-29 20:00:00",
    "date_end": "2023-11-12 20:00:00",
    "update_state": 1,
    "descript": "You have recorded a conversation you had with someone in a haunted house. Upon reviewing the recordings, you realize that ghosts have made noise, making it difficult to transcribe the text accurately. You will receive two lines. The first line will be the sound made by the ghosts. The second line will be the sentence with interruptions from the ghosts. The ghostly sounds can sometimes repeat the same letter in uppercase or lowercase (e.g., \"BOooOHhh\" can be produced from \"boh\"). The goal is to remove ghost noises.\n\n<b><u>Example:</u></b>\n\nThe transcription of the recording is \"Helbohlo wBoOohhorld!\"\nWe can see that there is a \"boh\" in \"Helbohlo.\" So, we can remove it, knowing that the ghost's sound is \"boh.\"\nLikewise, in the next word, we see \"BoOohh.\" This is just a repetition of the letters in \"boh.\"\nSo, we can remove it.\nThe result is, therefore, \"Hello world!\"\n\nMore info</div>\n\n0 < ghost_world < 10\nghost_world can have lower and upper case letters.\n0 < recording < 1000\nHappy halloween!",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "raku",
    "example": null,
    "more_info": null
  },
  {
    "id": 70,
    "title": "Fractal Expansion",
    "date_enable": "2023-11-12 20:00:00",
    "date_end": "2023-11-19 20:00:00",
    "update_state": 1,
    "descript": "In this problem you will be given a square pattern of size nxn and a repetition factor r.\nEach pattern consists of dots and hashes.\nThe pattern will have to be recursively expanded in such a way that in the new pattern the hash becomes the old pattern, and a dot becomes empty space of more dots.\nThe amount of recursions includes the original pattern, meaning 2 recursions will result in the pattern being extended once.\nThe recusively repeated pattern should be your output.",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 8,
    "voters": 1,
    "lotw": "lua",
    "example": "The input pattern is a 3x3 square with a dot in the middle. We need to recursively expand this pattern 3 times.\nEach of the hashes in our pattern will be replaced by the same original pattern, and each dot will be replaced by a 3x3 square of dots (empty space).\nThe first expansion will result in a 9x9 pattern with 8 of the original patterns arranged in a square, with a 3x3 hole in the middle.\nWe simply repeat this process with our new pattern. The result is a 27x27 grid with a 9x9 hole in the middle, and 8 of our previous patterns arranged in a square around it.",
    "more_info": "1 <= size <= 5\n1 <= repetitions <= 8 - size\nAll patterns will be a square.\nThe patterns will only consist of dots and hashes."
  },
  {
    "id": 71,
    "title": "Color Blend",
    "date_enable": "2023-11-19 20:00:00",
    "date_end": "2023-12-03 20:00:00",
    "update_state": 1,
    "descript": "A common way of representing colors is using a HEX format. This format consists of a hash (#) followed by 6 hexadecimal digits (0-f). \nEach pair of digits represents the intensity of a single color, just like RGB (the first 2 digits are a value 0-255 for red, the second pair for green, and the final pair for blue).\nIn this challenge, we want to blend multiple colors together. This can most easily be done by simply taking the average of each of the 3 color channels.\nIn case the average is a decimal number, we will round this down (e.g. if we have 255 and 0 for a channel (00, ff), the average is 127.5, which would become 127 (7f)).\nThe input will consist of 2 lines: The first line will be a list of hex codes, the second line will be a list of percentages for each of the colors.\nThe output should be the hex code of the blended color.",
    "show_case": 8,
    "random_case": 6,
    "sum_votes": 5,
    "voters": 1,
    "lotw": "rust",
    "example": "The first color is #ffffff, which is 255, 255, 255 in RGB.\nThe RGB of the second color (#ff0000) is 255, 0, 0.\nThe last color (#ffff00) has an RGB of 255, 255, 0.\nSince the first color has a percentage of 50%, and each of its values is ff (255), it fills every channel to 127.5.\nThe second color has a percentage of 25%. It has ff (255) in the red channel and 00 (0) in the other channels, so it adds 63.75 to the red channel (bringing up the total to 191.25) and 0 to the other channels.\nThe final color also has a percentage of 25%, and ff (255) in the red and green channels. This means again 63.75 is added to the red channel (bringing up the total to 255) and 63.75 to the green channel (bringing up the total to 191.25).\nThe final color gives us (255, 191.25, 127.5) in RGB. Since we round down, this becomes (255, 191, 127) in RGB, which is #ffbf7f in HEX.  ",
    "more_info": "1 <= color_amount <= 50\n0 <= percentage <= 100\ntotal_percentage == 100\ninput / output colors are valid hex format"
  },
  {
    "id": 72,
    "title": "End Golf",
    "date_enable": "2023-12-17 20:00:00",
    "date_end": "2024-01-01 20:00:00",
    "update_state": 1,
    "descript": "Before the start of this problem, I would like to say, that this is the last problem of WeekGolf.\nIt has been a good experience, and I had very good time golfing and meeting all the players of weekgolf.\nBut now that I have a work, I don't have a lot of time to do a lot of things, and when I have free time I prefer to invest it in learning new things an creating new stuff rather than creating problems for WeekGolf.\nYou can found the repository of weekgolf at https://github.com/tkr-sh/weekgolf, it's under a GPL3 License, so you can create your own weekgolf if you want :D!\n\nTime for the problem:\n\nYou will receive a list of names as input, each on a separate line.\nFrom this list, you need to generate two numbers: <code>a = 0</code> and <code>b = size(names)</code>.\nThen, create a Fibonacci sequence starting from a and ending at b, where b becomes <code>(a + b) % 128</code>.\n\nDuring each iteration of generating the Fibonacci sequence, find the name whose ASCII mean is closest to the value of b.\nPrint this name for each iteration.\n\n\n<b><u>Example:</u></b>\n\n\nWe have 5 names: \"Steffan\", \"ShaneTheGamer\", \"oskar\", \"TKirishima\", \"JoKing\"\nThe mean for each user is:\nSteffan: 101.57\nShaneTheGamer: 98.15\noskar: 108.80\nTKirishima: 101.30\nJoKing: 96.33\n\nAnd so:\na=0 and b=5\n5:   JoKing\n...\n105: Steffan\n42:  JoKing\n...\n93:  JoKing\n106: oskar\n71:  JoKing\n49:  JoKing\n\n\nMore info</div>\n\n\n0 < size(names) < 100\n",
    "show_case": 7,
    "random_case": 6,
    "sum_votes": 0,
    "voters": 0,
    "lotw": "Python",
    "example": null,
    "more_info": null
  }
]